
dpcu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f74  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  0800414c  0800414c  0000514c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041a0  080041a0  0000601c  2**0
                  CONTENTS
  4 .ARM          00000008  080041a0  080041a0  000051a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041a8  080041a8  0000601c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041a8  080041a8  000051a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080041ac  080041ac  000051ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  080041b0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  2000001c  080041cc  0000601c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  080041cc  00006134  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000601c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f944  00000000  00000000  0000604c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023de  00000000  00000000  00015990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c38  00000000  00000000  00017d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000963  00000000  00000000  000189a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024cfc  00000000  00000000  0001930b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f9dd  00000000  00000000  0003e007  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8126  00000000  00000000  0004d9e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00135b0a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003114  00000000  00000000  00135b50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  00138c64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000001c 	.word	0x2000001c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004134 	.word	0x08004134

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000020 	.word	0x20000020
 8000214:	08004134 	.word	0x08004134

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08a      	sub	sp, #40	@ 0x28
 800050c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050e:	f107 0314 	add.w	r3, r7, #20
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]
 800051c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800051e:	4b25      	ldr	r3, [pc, #148]	@ (80005b4 <MX_GPIO_Init+0xac>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000522:	4a24      	ldr	r2, [pc, #144]	@ (80005b4 <MX_GPIO_Init+0xac>)
 8000524:	f043 0304 	orr.w	r3, r3, #4
 8000528:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800052a:	4b22      	ldr	r3, [pc, #136]	@ (80005b4 <MX_GPIO_Init+0xac>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800052e:	f003 0304 	and.w	r3, r3, #4
 8000532:	613b      	str	r3, [r7, #16]
 8000534:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000536:	4b1f      	ldr	r3, [pc, #124]	@ (80005b4 <MX_GPIO_Init+0xac>)
 8000538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800053a:	4a1e      	ldr	r2, [pc, #120]	@ (80005b4 <MX_GPIO_Init+0xac>)
 800053c:	f043 0320 	orr.w	r3, r3, #32
 8000540:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000542:	4b1c      	ldr	r3, [pc, #112]	@ (80005b4 <MX_GPIO_Init+0xac>)
 8000544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000546:	f003 0320 	and.w	r3, r3, #32
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800054e:	4b19      	ldr	r3, [pc, #100]	@ (80005b4 <MX_GPIO_Init+0xac>)
 8000550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000552:	4a18      	ldr	r2, [pc, #96]	@ (80005b4 <MX_GPIO_Init+0xac>)
 8000554:	f043 0301 	orr.w	r3, r3, #1
 8000558:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800055a:	4b16      	ldr	r3, [pc, #88]	@ (80005b4 <MX_GPIO_Init+0xac>)
 800055c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800055e:	f003 0301 	and.w	r3, r3, #1
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000566:	4b13      	ldr	r3, [pc, #76]	@ (80005b4 <MX_GPIO_Init+0xac>)
 8000568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800056a:	4a12      	ldr	r2, [pc, #72]	@ (80005b4 <MX_GPIO_Init+0xac>)
 800056c:	f043 0302 	orr.w	r3, r3, #2
 8000570:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000572:	4b10      	ldr	r3, [pc, #64]	@ (80005b4 <MX_GPIO_Init+0xac>)
 8000574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000576:	f003 0302 	and.w	r3, r3, #2
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800057e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000582:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000584:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000588:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058a:	2300      	movs	r3, #0
 800058c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800058e:	f107 0314 	add.w	r3, r7, #20
 8000592:	4619      	mov	r1, r3
 8000594:	4808      	ldr	r0, [pc, #32]	@ (80005b8 <MX_GPIO_Init+0xb0>)
 8000596:	f000 fc87 	bl	8000ea8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800059a:	2200      	movs	r2, #0
 800059c:	2100      	movs	r1, #0
 800059e:	2028      	movs	r0, #40	@ 0x28
 80005a0:	f000 fbe7 	bl	8000d72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005a4:	2028      	movs	r0, #40	@ 0x28
 80005a6:	f000 fbfe 	bl	8000da6 <HAL_NVIC_EnableIRQ>

}
 80005aa:	bf00      	nop
 80005ac:	3728      	adds	r7, #40	@ 0x28
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40021000 	.word	0x40021000
 80005b8:	48000800 	.word	0x48000800

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c0:	f000 fa69 	bl	8000a96 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c4:	f000 f84a 	bl	800065c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c8:	f7ff ff9e 	bl	8000508 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80005cc:	f000 f998 	bl	8000900 <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 80005d0:	f000 f896 	bl	8000700 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&hlpuart1, (uint8_t*)"dpcu\n", 5, 1000);
 80005d4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005d8:	2205      	movs	r2, #5
 80005da:	4919      	ldr	r1, [pc, #100]	@ (8000640 <main+0x84>)
 80005dc:	4819      	ldr	r0, [pc, #100]	@ (8000644 <main+0x88>)
 80005de:	f002 fed1 	bl	8003384 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if (HAL_SPI_Transmit(&hspi1, tx_buffer, 4, HAL_MAX_DELAY) == HAL_OK)
 80005e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005e6:	2204      	movs	r2, #4
 80005e8:	4917      	ldr	r1, [pc, #92]	@ (8000648 <main+0x8c>)
 80005ea:	4818      	ldr	r0, [pc, #96]	@ (800064c <main+0x90>)
 80005ec:	f001 fedd 	bl	80023aa <HAL_SPI_Transmit>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d1f5      	bne.n	80005e2 <main+0x26>
    {
      HAL_UART_Transmit(&hlpuart1, (uint8_t*)"ping\n", 5, 1000);
 80005f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005fa:	2205      	movs	r2, #5
 80005fc:	4914      	ldr	r1, [pc, #80]	@ (8000650 <main+0x94>)
 80005fe:	4811      	ldr	r0, [pc, #68]	@ (8000644 <main+0x88>)
 8000600:	f002 fec0 	bl	8003384 <HAL_UART_Transmit>
      if (HAL_SPI_Receive(&hspi1, rx_buffer, 4, HAL_MAX_DELAY) == HAL_OK)
 8000604:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000608:	2204      	movs	r2, #4
 800060a:	4912      	ldr	r1, [pc, #72]	@ (8000654 <main+0x98>)
 800060c:	480f      	ldr	r0, [pc, #60]	@ (800064c <main+0x90>)
 800060e:	f002 f842 	bl	8002696 <HAL_SPI_Receive>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d1e4      	bne.n	80005e2 <main+0x26>
      {
    	HAL_UART_Transmit(&hlpuart1, rx_buffer, 4, 1000);
 8000618:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800061c:	2204      	movs	r2, #4
 800061e:	490d      	ldr	r1, [pc, #52]	@ (8000654 <main+0x98>)
 8000620:	4808      	ldr	r0, [pc, #32]	@ (8000644 <main+0x88>)
 8000622:	f002 feaf 	bl	8003384 <HAL_UART_Transmit>
        HAL_UART_Transmit(&hlpuart1, (uint8_t*)"\n", 1, 1000);
 8000626:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800062a:	2201      	movs	r2, #1
 800062c:	490a      	ldr	r1, [pc, #40]	@ (8000658 <main+0x9c>)
 800062e:	4805      	ldr	r0, [pc, #20]	@ (8000644 <main+0x88>)
 8000630:	f002 fea8 	bl	8003384 <HAL_UART_Transmit>
        HAL_Delay(500);
 8000634:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000638:	f000 fa9e 	bl	8000b78 <HAL_Delay>
    if (HAL_SPI_Transmit(&hspi1, tx_buffer, 4, HAL_MAX_DELAY) == HAL_OK)
 800063c:	e7d1      	b.n	80005e2 <main+0x26>
 800063e:	bf00      	nop
 8000640:	0800414c 	.word	0x0800414c
 8000644:	2000009c 	.word	0x2000009c
 8000648:	20000000 	.word	0x20000000
 800064c:	20000038 	.word	0x20000038
 8000650:	08004154 	.word	0x08004154
 8000654:	20000008 	.word	0x20000008
 8000658:	0800415c 	.word	0x0800415c

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b094      	sub	sp, #80	@ 0x50
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 0318 	add.w	r3, r7, #24
 8000666:	2238      	movs	r2, #56	@ 0x38
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f003 fd36 	bl	80040dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]
 800067a:	60da      	str	r2, [r3, #12]
 800067c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800067e:	2000      	movs	r0, #0
 8000680:	f000 fdb8 	bl	80011f4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000684:	2302      	movs	r3, #2
 8000686:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000688:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800068c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800068e:	2340      	movs	r3, #64	@ 0x40
 8000690:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000692:	2302      	movs	r3, #2
 8000694:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000696:	2302      	movs	r3, #2
 8000698:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800069a:	2304      	movs	r3, #4
 800069c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800069e:	2355      	movs	r3, #85	@ 0x55
 80006a0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a2:	2302      	movs	r3, #2
 80006a4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006a6:	2302      	movs	r3, #2
 80006a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006aa:	2302      	movs	r3, #2
 80006ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ae:	f107 0318 	add.w	r3, r7, #24
 80006b2:	4618      	mov	r0, r3
 80006b4:	f000 fe52 	bl	800135c <HAL_RCC_OscConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80006be:	f000 f818 	bl	80006f2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c2:	230f      	movs	r3, #15
 80006c4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c6:	2303      	movs	r3, #3
 80006c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	2104      	movs	r1, #4
 80006da:	4618      	mov	r0, r3
 80006dc:	f001 f950 	bl	8001980 <HAL_RCC_ClockConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80006e6:	f000 f804 	bl	80006f2 <Error_Handler>
  }
}
 80006ea:	bf00      	nop
 80006ec:	3750      	adds	r7, #80	@ 0x50
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}

080006f2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f2:	b480      	push	{r7}
 80006f4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f6:	b672      	cpsid	i
}
 80006f8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006fa:	bf00      	nop
 80006fc:	e7fd      	b.n	80006fa <Error_Handler+0x8>
	...

08000700 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000704:	4b1b      	ldr	r3, [pc, #108]	@ (8000774 <MX_SPI1_Init+0x74>)
 8000706:	4a1c      	ldr	r2, [pc, #112]	@ (8000778 <MX_SPI1_Init+0x78>)
 8000708:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800070a:	4b1a      	ldr	r3, [pc, #104]	@ (8000774 <MX_SPI1_Init+0x74>)
 800070c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000710:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000712:	4b18      	ldr	r3, [pc, #96]	@ (8000774 <MX_SPI1_Init+0x74>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000718:	4b16      	ldr	r3, [pc, #88]	@ (8000774 <MX_SPI1_Init+0x74>)
 800071a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800071e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000720:	4b14      	ldr	r3, [pc, #80]	@ (8000774 <MX_SPI1_Init+0x74>)
 8000722:	2200      	movs	r2, #0
 8000724:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000726:	4b13      	ldr	r3, [pc, #76]	@ (8000774 <MX_SPI1_Init+0x74>)
 8000728:	2200      	movs	r2, #0
 800072a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800072c:	4b11      	ldr	r3, [pc, #68]	@ (8000774 <MX_SPI1_Init+0x74>)
 800072e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000732:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000734:	4b0f      	ldr	r3, [pc, #60]	@ (8000774 <MX_SPI1_Init+0x74>)
 8000736:	2238      	movs	r2, #56	@ 0x38
 8000738:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800073a:	4b0e      	ldr	r3, [pc, #56]	@ (8000774 <MX_SPI1_Init+0x74>)
 800073c:	2200      	movs	r2, #0
 800073e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000740:	4b0c      	ldr	r3, [pc, #48]	@ (8000774 <MX_SPI1_Init+0x74>)
 8000742:	2200      	movs	r2, #0
 8000744:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000746:	4b0b      	ldr	r3, [pc, #44]	@ (8000774 <MX_SPI1_Init+0x74>)
 8000748:	2200      	movs	r2, #0
 800074a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800074c:	4b09      	ldr	r3, [pc, #36]	@ (8000774 <MX_SPI1_Init+0x74>)
 800074e:	2207      	movs	r2, #7
 8000750:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000752:	4b08      	ldr	r3, [pc, #32]	@ (8000774 <MX_SPI1_Init+0x74>)
 8000754:	2200      	movs	r2, #0
 8000756:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000758:	4b06      	ldr	r3, [pc, #24]	@ (8000774 <MX_SPI1_Init+0x74>)
 800075a:	2208      	movs	r2, #8
 800075c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800075e:	4805      	ldr	r0, [pc, #20]	@ (8000774 <MX_SPI1_Init+0x74>)
 8000760:	f001 fd78 	bl	8002254 <HAL_SPI_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800076a:	f7ff ffc2 	bl	80006f2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000038 	.word	0x20000038
 8000778:	40013000 	.word	0x40013000

0800077c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b08a      	sub	sp, #40	@ 0x28
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000784:	f107 0314 	add.w	r3, r7, #20
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a1b      	ldr	r2, [pc, #108]	@ (8000808 <HAL_SPI_MspInit+0x8c>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d130      	bne.n	8000800 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800079e:	4b1b      	ldr	r3, [pc, #108]	@ (800080c <HAL_SPI_MspInit+0x90>)
 80007a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007a2:	4a1a      	ldr	r2, [pc, #104]	@ (800080c <HAL_SPI_MspInit+0x90>)
 80007a4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80007aa:	4b18      	ldr	r3, [pc, #96]	@ (800080c <HAL_SPI_MspInit+0x90>)
 80007ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007b2:	613b      	str	r3, [r7, #16]
 80007b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b6:	4b15      	ldr	r3, [pc, #84]	@ (800080c <HAL_SPI_MspInit+0x90>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ba:	4a14      	ldr	r2, [pc, #80]	@ (800080c <HAL_SPI_MspInit+0x90>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007c2:	4b12      	ldr	r3, [pc, #72]	@ (800080c <HAL_SPI_MspInit+0x90>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80007ce:	23e0      	movs	r3, #224	@ 0xe0
 80007d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d2:	2302      	movs	r3, #2
 80007d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007da:	2300      	movs	r3, #0
 80007dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007de:	2305      	movs	r3, #5
 80007e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e2:	f107 0314 	add.w	r3, r7, #20
 80007e6:	4619      	mov	r1, r3
 80007e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007ec:	f000 fb5c 	bl	8000ea8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80007f0:	2200      	movs	r2, #0
 80007f2:	2100      	movs	r1, #0
 80007f4:	2023      	movs	r0, #35	@ 0x23
 80007f6:	f000 fabc 	bl	8000d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80007fa:	2023      	movs	r0, #35	@ 0x23
 80007fc:	f000 fad3 	bl	8000da6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000800:	bf00      	nop
 8000802:	3728      	adds	r7, #40	@ 0x28
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40013000 	.word	0x40013000
 800080c:	40021000 	.word	0x40021000

08000810 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000816:	4b0f      	ldr	r3, [pc, #60]	@ (8000854 <HAL_MspInit+0x44>)
 8000818:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800081a:	4a0e      	ldr	r2, [pc, #56]	@ (8000854 <HAL_MspInit+0x44>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	6613      	str	r3, [r2, #96]	@ 0x60
 8000822:	4b0c      	ldr	r3, [pc, #48]	@ (8000854 <HAL_MspInit+0x44>)
 8000824:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800082e:	4b09      	ldr	r3, [pc, #36]	@ (8000854 <HAL_MspInit+0x44>)
 8000830:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000832:	4a08      	ldr	r2, [pc, #32]	@ (8000854 <HAL_MspInit+0x44>)
 8000834:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000838:	6593      	str	r3, [r2, #88]	@ 0x58
 800083a:	4b06      	ldr	r3, [pc, #24]	@ (8000854 <HAL_MspInit+0x44>)
 800083c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800083e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000842:	603b      	str	r3, [r7, #0]
 8000844:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000846:	f000 fd79 	bl	800133c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40021000 	.word	0x40021000

08000858 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800085c:	bf00      	nop
 800085e:	e7fd      	b.n	800085c <NMI_Handler+0x4>

08000860 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000864:	bf00      	nop
 8000866:	e7fd      	b.n	8000864 <HardFault_Handler+0x4>

08000868 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800086c:	bf00      	nop
 800086e:	e7fd      	b.n	800086c <MemManage_Handler+0x4>

08000870 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000874:	bf00      	nop
 8000876:	e7fd      	b.n	8000874 <BusFault_Handler+0x4>

08000878 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800087c:	bf00      	nop
 800087e:	e7fd      	b.n	800087c <UsageFault_Handler+0x4>

08000880 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr

0800088e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr

0800089c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr

080008aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ae:	f000 f945 	bl	8000b3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
	...

080008b8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80008bc:	4802      	ldr	r0, [pc, #8]	@ (80008c8 <SPI1_IRQHandler+0x10>)
 80008be:	f002 fa41 	bl	8002d44 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000038 	.word	0x20000038

080008cc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80008d0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80008d4:	f000 fc6a 	bl	80011ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}

080008dc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80008e0:	4b06      	ldr	r3, [pc, #24]	@ (80008fc <SystemInit+0x20>)
 80008e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008e6:	4a05      	ldr	r2, [pc, #20]	@ (80008fc <SystemInit+0x20>)
 80008e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008f0:	bf00      	nop
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	e000ed00 	.word	0xe000ed00

08000900 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000904:	4b21      	ldr	r3, [pc, #132]	@ (800098c <MX_LPUART1_UART_Init+0x8c>)
 8000906:	4a22      	ldr	r2, [pc, #136]	@ (8000990 <MX_LPUART1_UART_Init+0x90>)
 8000908:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800090a:	4b20      	ldr	r3, [pc, #128]	@ (800098c <MX_LPUART1_UART_Init+0x8c>)
 800090c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000910:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000912:	4b1e      	ldr	r3, [pc, #120]	@ (800098c <MX_LPUART1_UART_Init+0x8c>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000918:	4b1c      	ldr	r3, [pc, #112]	@ (800098c <MX_LPUART1_UART_Init+0x8c>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800091e:	4b1b      	ldr	r3, [pc, #108]	@ (800098c <MX_LPUART1_UART_Init+0x8c>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000924:	4b19      	ldr	r3, [pc, #100]	@ (800098c <MX_LPUART1_UART_Init+0x8c>)
 8000926:	220c      	movs	r2, #12
 8000928:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092a:	4b18      	ldr	r3, [pc, #96]	@ (800098c <MX_LPUART1_UART_Init+0x8c>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000930:	4b16      	ldr	r3, [pc, #88]	@ (800098c <MX_LPUART1_UART_Init+0x8c>)
 8000932:	2200      	movs	r2, #0
 8000934:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000936:	4b15      	ldr	r3, [pc, #84]	@ (800098c <MX_LPUART1_UART_Init+0x8c>)
 8000938:	2200      	movs	r2, #0
 800093a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800093c:	4b13      	ldr	r3, [pc, #76]	@ (800098c <MX_LPUART1_UART_Init+0x8c>)
 800093e:	2200      	movs	r2, #0
 8000940:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000942:	4812      	ldr	r0, [pc, #72]	@ (800098c <MX_LPUART1_UART_Init+0x8c>)
 8000944:	f002 fcce 	bl	80032e4 <HAL_UART_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800094e:	f7ff fed0 	bl	80006f2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000952:	2100      	movs	r1, #0
 8000954:	480d      	ldr	r0, [pc, #52]	@ (800098c <MX_LPUART1_UART_Init+0x8c>)
 8000956:	f003 faf7 	bl	8003f48 <HAL_UARTEx_SetTxFifoThreshold>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000960:	f7ff fec7 	bl	80006f2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000964:	2100      	movs	r1, #0
 8000966:	4809      	ldr	r0, [pc, #36]	@ (800098c <MX_LPUART1_UART_Init+0x8c>)
 8000968:	f003 fb2c 	bl	8003fc4 <HAL_UARTEx_SetRxFifoThreshold>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000972:	f7ff febe 	bl	80006f2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000976:	4805      	ldr	r0, [pc, #20]	@ (800098c <MX_LPUART1_UART_Init+0x8c>)
 8000978:	f003 faad 	bl	8003ed6 <HAL_UARTEx_DisableFifoMode>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000982:	f7ff feb6 	bl	80006f2 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	2000009c 	.word	0x2000009c
 8000990:	40008000 	.word	0x40008000

08000994 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b09e      	sub	sp, #120	@ 0x78
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009ac:	f107 0310 	add.w	r3, r7, #16
 80009b0:	2254      	movs	r2, #84	@ 0x54
 80009b2:	2100      	movs	r1, #0
 80009b4:	4618      	mov	r0, r3
 80009b6:	f003 fb91 	bl	80040dc <memset>
  if(uartHandle->Instance==LPUART1)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4a1f      	ldr	r2, [pc, #124]	@ (8000a3c <HAL_UART_MspInit+0xa8>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d136      	bne.n	8000a32 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80009c4:	2320      	movs	r3, #32
 80009c6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80009c8:	2300      	movs	r3, #0
 80009ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009cc:	f107 0310 	add.w	r3, r7, #16
 80009d0:	4618      	mov	r0, r3
 80009d2:	f001 f9f1 	bl	8001db8 <HAL_RCCEx_PeriphCLKConfig>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009dc:	f7ff fe89 	bl	80006f2 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80009e0:	4b17      	ldr	r3, [pc, #92]	@ (8000a40 <HAL_UART_MspInit+0xac>)
 80009e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80009e4:	4a16      	ldr	r2, [pc, #88]	@ (8000a40 <HAL_UART_MspInit+0xac>)
 80009e6:	f043 0301 	orr.w	r3, r3, #1
 80009ea:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80009ec:	4b14      	ldr	r3, [pc, #80]	@ (8000a40 <HAL_UART_MspInit+0xac>)
 80009ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80009f0:	f003 0301 	and.w	r3, r3, #1
 80009f4:	60fb      	str	r3, [r7, #12]
 80009f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f8:	4b11      	ldr	r3, [pc, #68]	@ (8000a40 <HAL_UART_MspInit+0xac>)
 80009fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009fc:	4a10      	ldr	r2, [pc, #64]	@ (8000a40 <HAL_UART_MspInit+0xac>)
 80009fe:	f043 0301 	orr.w	r3, r3, #1
 8000a02:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a04:	4b0e      	ldr	r3, [pc, #56]	@ (8000a40 <HAL_UART_MspInit+0xac>)
 8000a06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a08:	f003 0301 	and.w	r3, r3, #1
 8000a0c:	60bb      	str	r3, [r7, #8]
 8000a0e:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000a10:	230c      	movs	r3, #12
 8000a12:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a14:	2302      	movs	r3, #2
 8000a16:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000a20:	230c      	movs	r3, #12
 8000a22:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a24:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000a28:	4619      	mov	r1, r3
 8000a2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a2e:	f000 fa3b 	bl	8000ea8 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8000a32:	bf00      	nop
 8000a34:	3778      	adds	r7, #120	@ 0x78
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40008000 	.word	0x40008000
 8000a40:	40021000 	.word	0x40021000

08000a44 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a44:	480d      	ldr	r0, [pc, #52]	@ (8000a7c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a46:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a48:	f7ff ff48 	bl	80008dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a4c:	480c      	ldr	r0, [pc, #48]	@ (8000a80 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a4e:	490d      	ldr	r1, [pc, #52]	@ (8000a84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a50:	4a0d      	ldr	r2, [pc, #52]	@ (8000a88 <LoopForever+0xe>)
  movs r3, #0
 8000a52:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000a54:	e002      	b.n	8000a5c <LoopCopyDataInit>

08000a56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a5a:	3304      	adds	r3, #4

08000a5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a60:	d3f9      	bcc.n	8000a56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a62:	4a0a      	ldr	r2, [pc, #40]	@ (8000a8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a64:	4c0a      	ldr	r4, [pc, #40]	@ (8000a90 <LoopForever+0x16>)
  movs r3, #0
 8000a66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a68:	e001      	b.n	8000a6e <LoopFillZerobss>

08000a6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a6c:	3204      	adds	r2, #4

08000a6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a70:	d3fb      	bcc.n	8000a6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a72:	f003 fb3b 	bl	80040ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a76:	f7ff fda1 	bl	80005bc <main>

08000a7a <LoopForever>:

LoopForever:
    b LoopForever
 8000a7a:	e7fe      	b.n	8000a7a <LoopForever>
  ldr   r0, =_estack
 8000a7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a84:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000a88:	080041b0 	.word	0x080041b0
  ldr r2, =_sbss
 8000a8c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000a90:	20000134 	.word	0x20000134

08000a94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a94:	e7fe      	b.n	8000a94 <ADC1_2_IRQHandler>

08000a96 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b082      	sub	sp, #8
 8000a9a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa0:	2003      	movs	r0, #3
 8000aa2:	f000 f95b 	bl	8000d5c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000aa6:	2000      	movs	r0, #0
 8000aa8:	f000 f80e 	bl	8000ac8 <HAL_InitTick>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d002      	beq.n	8000ab8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	71fb      	strb	r3, [r7, #7]
 8000ab6:	e001      	b.n	8000abc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ab8:	f7ff feaa 	bl	8000810 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000abc:	79fb      	ldrb	r3, [r7, #7]

}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
	...

08000ac8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ad4:	4b16      	ldr	r3, [pc, #88]	@ (8000b30 <HAL_InitTick+0x68>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d022      	beq.n	8000b22 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000adc:	4b15      	ldr	r3, [pc, #84]	@ (8000b34 <HAL_InitTick+0x6c>)
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	4b13      	ldr	r3, [pc, #76]	@ (8000b30 <HAL_InitTick+0x68>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000ae8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8000af0:	4618      	mov	r0, r3
 8000af2:	f000 f966 	bl	8000dc2 <HAL_SYSTICK_Config>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d10f      	bne.n	8000b1c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2b0f      	cmp	r3, #15
 8000b00:	d809      	bhi.n	8000b16 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b02:	2200      	movs	r2, #0
 8000b04:	6879      	ldr	r1, [r7, #4]
 8000b06:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b0a:	f000 f932 	bl	8000d72 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b38 <HAL_InitTick+0x70>)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	6013      	str	r3, [r2, #0]
 8000b14:	e007      	b.n	8000b26 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
 8000b18:	73fb      	strb	r3, [r7, #15]
 8000b1a:	e004      	b.n	8000b26 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	73fb      	strb	r3, [r7, #15]
 8000b20:	e001      	b.n	8000b26 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b22:	2301      	movs	r3, #1
 8000b24:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3710      	adds	r7, #16
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20000018 	.word	0x20000018
 8000b34:	20000010 	.word	0x20000010
 8000b38:	20000014 	.word	0x20000014

08000b3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b40:	4b05      	ldr	r3, [pc, #20]	@ (8000b58 <HAL_IncTick+0x1c>)
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	4b05      	ldr	r3, [pc, #20]	@ (8000b5c <HAL_IncTick+0x20>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4413      	add	r3, r2
 8000b4a:	4a03      	ldr	r2, [pc, #12]	@ (8000b58 <HAL_IncTick+0x1c>)
 8000b4c:	6013      	str	r3, [r2, #0]
}
 8000b4e:	bf00      	nop
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	20000130 	.word	0x20000130
 8000b5c:	20000018 	.word	0x20000018

08000b60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  return uwTick;
 8000b64:	4b03      	ldr	r3, [pc, #12]	@ (8000b74 <HAL_GetTick+0x14>)
 8000b66:	681b      	ldr	r3, [r3, #0]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	20000130 	.word	0x20000130

08000b78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b80:	f7ff ffee 	bl	8000b60 <HAL_GetTick>
 8000b84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000b90:	d004      	beq.n	8000b9c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b92:	4b09      	ldr	r3, [pc, #36]	@ (8000bb8 <HAL_Delay+0x40>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	68fa      	ldr	r2, [r7, #12]
 8000b98:	4413      	add	r3, r2
 8000b9a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b9c:	bf00      	nop
 8000b9e:	f7ff ffdf 	bl	8000b60 <HAL_GetTick>
 8000ba2:	4602      	mov	r2, r0
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	1ad3      	subs	r3, r2, r3
 8000ba8:	68fa      	ldr	r2, [r7, #12]
 8000baa:	429a      	cmp	r2, r3
 8000bac:	d8f7      	bhi.n	8000b9e <HAL_Delay+0x26>
  {
  }
}
 8000bae:	bf00      	nop
 8000bb0:	bf00      	nop
 8000bb2:	3710      	adds	r7, #16
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	20000018 	.word	0x20000018

08000bbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	f003 0307 	and.w	r3, r3, #7
 8000bca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c00 <__NVIC_SetPriorityGrouping+0x44>)
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bd2:	68ba      	ldr	r2, [r7, #8]
 8000bd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bd8:	4013      	ands	r3, r2
 8000bda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000be4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000be8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bee:	4a04      	ldr	r2, [pc, #16]	@ (8000c00 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	60d3      	str	r3, [r2, #12]
}
 8000bf4:	bf00      	nop
 8000bf6:	3714      	adds	r7, #20
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c08:	4b04      	ldr	r3, [pc, #16]	@ (8000c1c <__NVIC_GetPriorityGrouping+0x18>)
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	0a1b      	lsrs	r3, r3, #8
 8000c0e:	f003 0307 	and.w	r3, r3, #7
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	db0b      	blt.n	8000c4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	f003 021f 	and.w	r2, r3, #31
 8000c38:	4907      	ldr	r1, [pc, #28]	@ (8000c58 <__NVIC_EnableIRQ+0x38>)
 8000c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3e:	095b      	lsrs	r3, r3, #5
 8000c40:	2001      	movs	r0, #1
 8000c42:	fa00 f202 	lsl.w	r2, r0, r2
 8000c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c4a:	bf00      	nop
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	e000e100 	.word	0xe000e100

08000c5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	6039      	str	r1, [r7, #0]
 8000c66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	db0a      	blt.n	8000c86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	b2da      	uxtb	r2, r3
 8000c74:	490c      	ldr	r1, [pc, #48]	@ (8000ca8 <__NVIC_SetPriority+0x4c>)
 8000c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7a:	0112      	lsls	r2, r2, #4
 8000c7c:	b2d2      	uxtb	r2, r2
 8000c7e:	440b      	add	r3, r1
 8000c80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c84:	e00a      	b.n	8000c9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	b2da      	uxtb	r2, r3
 8000c8a:	4908      	ldr	r1, [pc, #32]	@ (8000cac <__NVIC_SetPriority+0x50>)
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	f003 030f 	and.w	r3, r3, #15
 8000c92:	3b04      	subs	r3, #4
 8000c94:	0112      	lsls	r2, r2, #4
 8000c96:	b2d2      	uxtb	r2, r2
 8000c98:	440b      	add	r3, r1
 8000c9a:	761a      	strb	r2, [r3, #24]
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	e000e100 	.word	0xe000e100
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b089      	sub	sp, #36	@ 0x24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	f003 0307 	and.w	r3, r3, #7
 8000cc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc4:	69fb      	ldr	r3, [r7, #28]
 8000cc6:	f1c3 0307 	rsb	r3, r3, #7
 8000cca:	2b04      	cmp	r3, #4
 8000ccc:	bf28      	it	cs
 8000cce:	2304      	movcs	r3, #4
 8000cd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	3304      	adds	r3, #4
 8000cd6:	2b06      	cmp	r3, #6
 8000cd8:	d902      	bls.n	8000ce0 <NVIC_EncodePriority+0x30>
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	3b03      	subs	r3, #3
 8000cde:	e000      	b.n	8000ce2 <NVIC_EncodePriority+0x32>
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ce8:	69bb      	ldr	r3, [r7, #24]
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	43da      	mvns	r2, r3
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	401a      	ands	r2, r3
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000d02:	43d9      	mvns	r1, r3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d08:	4313      	orrs	r3, r2
         );
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3724      	adds	r7, #36	@ 0x24
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
	...

08000d18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3b01      	subs	r3, #1
 8000d24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d28:	d301      	bcc.n	8000d2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e00f      	b.n	8000d4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d58 <SysTick_Config+0x40>)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	3b01      	subs	r3, #1
 8000d34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d36:	210f      	movs	r1, #15
 8000d38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d3c:	f7ff ff8e 	bl	8000c5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d40:	4b05      	ldr	r3, [pc, #20]	@ (8000d58 <SysTick_Config+0x40>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d46:	4b04      	ldr	r3, [pc, #16]	@ (8000d58 <SysTick_Config+0x40>)
 8000d48:	2207      	movs	r2, #7
 8000d4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	e000e010 	.word	0xe000e010

08000d5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d64:	6878      	ldr	r0, [r7, #4]
 8000d66:	f7ff ff29 	bl	8000bbc <__NVIC_SetPriorityGrouping>
}
 8000d6a:	bf00      	nop
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b086      	sub	sp, #24
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	4603      	mov	r3, r0
 8000d7a:	60b9      	str	r1, [r7, #8]
 8000d7c:	607a      	str	r2, [r7, #4]
 8000d7e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d80:	f7ff ff40 	bl	8000c04 <__NVIC_GetPriorityGrouping>
 8000d84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	68b9      	ldr	r1, [r7, #8]
 8000d8a:	6978      	ldr	r0, [r7, #20]
 8000d8c:	f7ff ff90 	bl	8000cb0 <NVIC_EncodePriority>
 8000d90:	4602      	mov	r2, r0
 8000d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d96:	4611      	mov	r1, r2
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff ff5f 	bl	8000c5c <__NVIC_SetPriority>
}
 8000d9e:	bf00      	nop
 8000da0:	3718      	adds	r7, #24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b082      	sub	sp, #8
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	4603      	mov	r3, r0
 8000dae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff ff33 	bl	8000c20 <__NVIC_EnableIRQ>
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b082      	sub	sp, #8
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f7ff ffa4 	bl	8000d18 <SysTick_Config>
 8000dd0:	4603      	mov	r3, r0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b084      	sub	sp, #16
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000de2:	2300      	movs	r3, #0
 8000de4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	2b02      	cmp	r3, #2
 8000df0:	d00d      	beq.n	8000e0e <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2204      	movs	r2, #4
 8000df6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2200      	movs	r2, #0
 8000e04:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	73fb      	strb	r3, [r7, #15]
 8000e0c:	e047      	b.n	8000e9e <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f022 020e 	bic.w	r2, r2, #14
 8000e1c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f022 0201 	bic.w	r2, r2, #1
 8000e2c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e38:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000e3c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e42:	f003 021f 	and.w	r2, r3, #31
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e4a:	2101      	movs	r1, #1
 8000e4c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e50:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000e5a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d00c      	beq.n	8000e7e <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e6e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000e72:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000e7c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2201      	movs	r2, #1
 8000e82:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d003      	beq.n	8000e9e <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	4798      	blx	r3
    }
  }
  return status;
 8000e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3710      	adds	r7, #16
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b087      	sub	sp, #28
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000eb6:	e15a      	b.n	800116e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	f000 814c 	beq.w	8001168 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f003 0303 	and.w	r3, r3, #3
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d005      	beq.n	8000ee8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d130      	bne.n	8000f4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	2203      	movs	r2, #3
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	4013      	ands	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	68da      	ldr	r2, [r3, #12]
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f1e:	2201      	movs	r2, #1
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	43db      	mvns	r3, r3
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	091b      	lsrs	r3, r3, #4
 8000f34:	f003 0201 	and.w	r2, r3, #1
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f003 0303 	and.w	r3, r3, #3
 8000f52:	2b03      	cmp	r3, #3
 8000f54:	d017      	beq.n	8000f86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	68db      	ldr	r3, [r3, #12]
 8000f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	2203      	movs	r2, #3
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43db      	mvns	r3, r3
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	689a      	ldr	r2, [r3, #8]
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f003 0303 	and.w	r3, r3, #3
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d123      	bne.n	8000fda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	08da      	lsrs	r2, r3, #3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	3208      	adds	r2, #8
 8000f9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	220f      	movs	r2, #15
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	691a      	ldr	r2, [r3, #16]
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	f003 0307 	and.w	r3, r3, #7
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	08da      	lsrs	r2, r3, #3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3208      	adds	r2, #8
 8000fd4:	6939      	ldr	r1, [r7, #16]
 8000fd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	2203      	movs	r2, #3
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43db      	mvns	r3, r3
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f003 0203 	and.w	r2, r3, #3
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	4313      	orrs	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001016:	2b00      	cmp	r3, #0
 8001018:	f000 80a6 	beq.w	8001168 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101c:	4b5b      	ldr	r3, [pc, #364]	@ (800118c <HAL_GPIO_Init+0x2e4>)
 800101e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001020:	4a5a      	ldr	r2, [pc, #360]	@ (800118c <HAL_GPIO_Init+0x2e4>)
 8001022:	f043 0301 	orr.w	r3, r3, #1
 8001026:	6613      	str	r3, [r2, #96]	@ 0x60
 8001028:	4b58      	ldr	r3, [pc, #352]	@ (800118c <HAL_GPIO_Init+0x2e4>)
 800102a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800102c:	f003 0301 	and.w	r3, r3, #1
 8001030:	60bb      	str	r3, [r7, #8]
 8001032:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001034:	4a56      	ldr	r2, [pc, #344]	@ (8001190 <HAL_GPIO_Init+0x2e8>)
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	089b      	lsrs	r3, r3, #2
 800103a:	3302      	adds	r3, #2
 800103c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001040:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	f003 0303 	and.w	r3, r3, #3
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	220f      	movs	r2, #15
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	43db      	mvns	r3, r3
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	4013      	ands	r3, r2
 8001056:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800105e:	d01f      	beq.n	80010a0 <HAL_GPIO_Init+0x1f8>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4a4c      	ldr	r2, [pc, #304]	@ (8001194 <HAL_GPIO_Init+0x2ec>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d019      	beq.n	800109c <HAL_GPIO_Init+0x1f4>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	4a4b      	ldr	r2, [pc, #300]	@ (8001198 <HAL_GPIO_Init+0x2f0>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d013      	beq.n	8001098 <HAL_GPIO_Init+0x1f0>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	4a4a      	ldr	r2, [pc, #296]	@ (800119c <HAL_GPIO_Init+0x2f4>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d00d      	beq.n	8001094 <HAL_GPIO_Init+0x1ec>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	4a49      	ldr	r2, [pc, #292]	@ (80011a0 <HAL_GPIO_Init+0x2f8>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d007      	beq.n	8001090 <HAL_GPIO_Init+0x1e8>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	4a48      	ldr	r2, [pc, #288]	@ (80011a4 <HAL_GPIO_Init+0x2fc>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d101      	bne.n	800108c <HAL_GPIO_Init+0x1e4>
 8001088:	2305      	movs	r3, #5
 800108a:	e00a      	b.n	80010a2 <HAL_GPIO_Init+0x1fa>
 800108c:	2306      	movs	r3, #6
 800108e:	e008      	b.n	80010a2 <HAL_GPIO_Init+0x1fa>
 8001090:	2304      	movs	r3, #4
 8001092:	e006      	b.n	80010a2 <HAL_GPIO_Init+0x1fa>
 8001094:	2303      	movs	r3, #3
 8001096:	e004      	b.n	80010a2 <HAL_GPIO_Init+0x1fa>
 8001098:	2302      	movs	r3, #2
 800109a:	e002      	b.n	80010a2 <HAL_GPIO_Init+0x1fa>
 800109c:	2301      	movs	r3, #1
 800109e:	e000      	b.n	80010a2 <HAL_GPIO_Init+0x1fa>
 80010a0:	2300      	movs	r3, #0
 80010a2:	697a      	ldr	r2, [r7, #20]
 80010a4:	f002 0203 	and.w	r2, r2, #3
 80010a8:	0092      	lsls	r2, r2, #2
 80010aa:	4093      	lsls	r3, r2
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010b2:	4937      	ldr	r1, [pc, #220]	@ (8001190 <HAL_GPIO_Init+0x2e8>)
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	089b      	lsrs	r3, r3, #2
 80010b8:	3302      	adds	r3, #2
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010c0:	4b39      	ldr	r3, [pc, #228]	@ (80011a8 <HAL_GPIO_Init+0x300>)
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	43db      	mvns	r3, r3
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	4013      	ands	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d003      	beq.n	80010e4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010e4:	4a30      	ldr	r2, [pc, #192]	@ (80011a8 <HAL_GPIO_Init+0x300>)
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010ea:	4b2f      	ldr	r3, [pc, #188]	@ (80011a8 <HAL_GPIO_Init+0x300>)
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	43db      	mvns	r3, r3
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	4013      	ands	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d003      	beq.n	800110e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	4313      	orrs	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800110e:	4a26      	ldr	r2, [pc, #152]	@ (80011a8 <HAL_GPIO_Init+0x300>)
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001114:	4b24      	ldr	r3, [pc, #144]	@ (80011a8 <HAL_GPIO_Init+0x300>)
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	43db      	mvns	r3, r3
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	4013      	ands	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800112c:	2b00      	cmp	r3, #0
 800112e:	d003      	beq.n	8001138 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	4313      	orrs	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001138:	4a1b      	ldr	r2, [pc, #108]	@ (80011a8 <HAL_GPIO_Init+0x300>)
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800113e:	4b1a      	ldr	r3, [pc, #104]	@ (80011a8 <HAL_GPIO_Init+0x300>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	43db      	mvns	r3, r3
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	4013      	ands	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d003      	beq.n	8001162 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	4313      	orrs	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001162:	4a11      	ldr	r2, [pc, #68]	@ (80011a8 <HAL_GPIO_Init+0x300>)
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	3301      	adds	r3, #1
 800116c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	fa22 f303 	lsr.w	r3, r2, r3
 8001178:	2b00      	cmp	r3, #0
 800117a:	f47f ae9d 	bne.w	8000eb8 <HAL_GPIO_Init+0x10>
  }
}
 800117e:	bf00      	nop
 8001180:	bf00      	nop
 8001182:	371c      	adds	r7, #28
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	40021000 	.word	0x40021000
 8001190:	40010000 	.word	0x40010000
 8001194:	48000400 	.word	0x48000400
 8001198:	48000800 	.word	0x48000800
 800119c:	48000c00 	.word	0x48000c00
 80011a0:	48001000 	.word	0x48001000
 80011a4:	48001400 	.word	0x48001400
 80011a8:	40010400 	.word	0x40010400

080011ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80011b6:	4b08      	ldr	r3, [pc, #32]	@ (80011d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011b8:	695a      	ldr	r2, [r3, #20]
 80011ba:	88fb      	ldrh	r3, [r7, #6]
 80011bc:	4013      	ands	r3, r2
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d006      	beq.n	80011d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011c2:	4a05      	ldr	r2, [pc, #20]	@ (80011d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011c4:	88fb      	ldrh	r3, [r7, #6]
 80011c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011c8:	88fb      	ldrh	r3, [r7, #6]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f000 f806 	bl	80011dc <HAL_GPIO_EXTI_Callback>
  }
}
 80011d0:	bf00      	nop
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40010400 	.word	0x40010400

080011dc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80011e6:	bf00      	nop
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
	...

080011f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d141      	bne.n	8001286 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001202:	4b4b      	ldr	r3, [pc, #300]	@ (8001330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800120a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800120e:	d131      	bne.n	8001274 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001210:	4b47      	ldr	r3, [pc, #284]	@ (8001330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001212:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001216:	4a46      	ldr	r2, [pc, #280]	@ (8001330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001218:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800121c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001220:	4b43      	ldr	r3, [pc, #268]	@ (8001330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001228:	4a41      	ldr	r2, [pc, #260]	@ (8001330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800122a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800122e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001230:	4b40      	ldr	r3, [pc, #256]	@ (8001334 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2232      	movs	r2, #50	@ 0x32
 8001236:	fb02 f303 	mul.w	r3, r2, r3
 800123a:	4a3f      	ldr	r2, [pc, #252]	@ (8001338 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800123c:	fba2 2303 	umull	r2, r3, r2, r3
 8001240:	0c9b      	lsrs	r3, r3, #18
 8001242:	3301      	adds	r3, #1
 8001244:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001246:	e002      	b.n	800124e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	3b01      	subs	r3, #1
 800124c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800124e:	4b38      	ldr	r3, [pc, #224]	@ (8001330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001250:	695b      	ldr	r3, [r3, #20]
 8001252:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001256:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800125a:	d102      	bne.n	8001262 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d1f2      	bne.n	8001248 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001262:	4b33      	ldr	r3, [pc, #204]	@ (8001330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001264:	695b      	ldr	r3, [r3, #20]
 8001266:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800126a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800126e:	d158      	bne.n	8001322 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001270:	2303      	movs	r3, #3
 8001272:	e057      	b.n	8001324 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001274:	4b2e      	ldr	r3, [pc, #184]	@ (8001330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001276:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800127a:	4a2d      	ldr	r2, [pc, #180]	@ (8001330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800127c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001280:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001284:	e04d      	b.n	8001322 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800128c:	d141      	bne.n	8001312 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800128e:	4b28      	ldr	r3, [pc, #160]	@ (8001330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001296:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800129a:	d131      	bne.n	8001300 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800129c:	4b24      	ldr	r3, [pc, #144]	@ (8001330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800129e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80012a2:	4a23      	ldr	r2, [pc, #140]	@ (8001330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012ac:	4b20      	ldr	r3, [pc, #128]	@ (8001330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80012b4:	4a1e      	ldr	r2, [pc, #120]	@ (8001330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001334 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2232      	movs	r2, #50	@ 0x32
 80012c2:	fb02 f303 	mul.w	r3, r2, r3
 80012c6:	4a1c      	ldr	r2, [pc, #112]	@ (8001338 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80012c8:	fba2 2303 	umull	r2, r3, r2, r3
 80012cc:	0c9b      	lsrs	r3, r3, #18
 80012ce:	3301      	adds	r3, #1
 80012d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012d2:	e002      	b.n	80012da <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012da:	4b15      	ldr	r3, [pc, #84]	@ (8001330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012dc:	695b      	ldr	r3, [r3, #20]
 80012de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012e6:	d102      	bne.n	80012ee <HAL_PWREx_ControlVoltageScaling+0xfa>
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d1f2      	bne.n	80012d4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012ee:	4b10      	ldr	r3, [pc, #64]	@ (8001330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012fa:	d112      	bne.n	8001322 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e011      	b.n	8001324 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001300:	4b0b      	ldr	r3, [pc, #44]	@ (8001330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001302:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001306:	4a0a      	ldr	r2, [pc, #40]	@ (8001330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001308:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800130c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001310:	e007      	b.n	8001322 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001312:	4b07      	ldr	r3, [pc, #28]	@ (8001330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800131a:	4a05      	ldr	r2, [pc, #20]	@ (8001330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800131c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001320:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001322:	2300      	movs	r3, #0
}
 8001324:	4618      	mov	r0, r3
 8001326:	3714      	adds	r7, #20
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	40007000 	.word	0x40007000
 8001334:	20000010 	.word	0x20000010
 8001338:	431bde83 	.word	0x431bde83

0800133c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001340:	4b05      	ldr	r3, [pc, #20]	@ (8001358 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	4a04      	ldr	r2, [pc, #16]	@ (8001358 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001346:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800134a:	6093      	str	r3, [r2, #8]
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	40007000 	.word	0x40007000

0800135c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b088      	sub	sp, #32
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d101      	bne.n	800136e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e2fe      	b.n	800196c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	2b00      	cmp	r3, #0
 8001378:	d075      	beq.n	8001466 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800137a:	4b97      	ldr	r3, [pc, #604]	@ (80015d8 <HAL_RCC_OscConfig+0x27c>)
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	f003 030c 	and.w	r3, r3, #12
 8001382:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001384:	4b94      	ldr	r3, [pc, #592]	@ (80015d8 <HAL_RCC_OscConfig+0x27c>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	f003 0303 	and.w	r3, r3, #3
 800138c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	2b0c      	cmp	r3, #12
 8001392:	d102      	bne.n	800139a <HAL_RCC_OscConfig+0x3e>
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	2b03      	cmp	r3, #3
 8001398:	d002      	beq.n	80013a0 <HAL_RCC_OscConfig+0x44>
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	2b08      	cmp	r3, #8
 800139e:	d10b      	bne.n	80013b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a0:	4b8d      	ldr	r3, [pc, #564]	@ (80015d8 <HAL_RCC_OscConfig+0x27c>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d05b      	beq.n	8001464 <HAL_RCC_OscConfig+0x108>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d157      	bne.n	8001464 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e2d9      	b.n	800196c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013c0:	d106      	bne.n	80013d0 <HAL_RCC_OscConfig+0x74>
 80013c2:	4b85      	ldr	r3, [pc, #532]	@ (80015d8 <HAL_RCC_OscConfig+0x27c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a84      	ldr	r2, [pc, #528]	@ (80015d8 <HAL_RCC_OscConfig+0x27c>)
 80013c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013cc:	6013      	str	r3, [r2, #0]
 80013ce:	e01d      	b.n	800140c <HAL_RCC_OscConfig+0xb0>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013d8:	d10c      	bne.n	80013f4 <HAL_RCC_OscConfig+0x98>
 80013da:	4b7f      	ldr	r3, [pc, #508]	@ (80015d8 <HAL_RCC_OscConfig+0x27c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a7e      	ldr	r2, [pc, #504]	@ (80015d8 <HAL_RCC_OscConfig+0x27c>)
 80013e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013e4:	6013      	str	r3, [r2, #0]
 80013e6:	4b7c      	ldr	r3, [pc, #496]	@ (80015d8 <HAL_RCC_OscConfig+0x27c>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a7b      	ldr	r2, [pc, #492]	@ (80015d8 <HAL_RCC_OscConfig+0x27c>)
 80013ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013f0:	6013      	str	r3, [r2, #0]
 80013f2:	e00b      	b.n	800140c <HAL_RCC_OscConfig+0xb0>
 80013f4:	4b78      	ldr	r3, [pc, #480]	@ (80015d8 <HAL_RCC_OscConfig+0x27c>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a77      	ldr	r2, [pc, #476]	@ (80015d8 <HAL_RCC_OscConfig+0x27c>)
 80013fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013fe:	6013      	str	r3, [r2, #0]
 8001400:	4b75      	ldr	r3, [pc, #468]	@ (80015d8 <HAL_RCC_OscConfig+0x27c>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a74      	ldr	r2, [pc, #464]	@ (80015d8 <HAL_RCC_OscConfig+0x27c>)
 8001406:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800140a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d013      	beq.n	800143c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001414:	f7ff fba4 	bl	8000b60 <HAL_GetTick>
 8001418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800141a:	e008      	b.n	800142e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800141c:	f7ff fba0 	bl	8000b60 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b64      	cmp	r3, #100	@ 0x64
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e29e      	b.n	800196c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800142e:	4b6a      	ldr	r3, [pc, #424]	@ (80015d8 <HAL_RCC_OscConfig+0x27c>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d0f0      	beq.n	800141c <HAL_RCC_OscConfig+0xc0>
 800143a:	e014      	b.n	8001466 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800143c:	f7ff fb90 	bl	8000b60 <HAL_GetTick>
 8001440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001442:	e008      	b.n	8001456 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001444:	f7ff fb8c 	bl	8000b60 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b64      	cmp	r3, #100	@ 0x64
 8001450:	d901      	bls.n	8001456 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e28a      	b.n	800196c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001456:	4b60      	ldr	r3, [pc, #384]	@ (80015d8 <HAL_RCC_OscConfig+0x27c>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1f0      	bne.n	8001444 <HAL_RCC_OscConfig+0xe8>
 8001462:	e000      	b.n	8001466 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001464:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	2b00      	cmp	r3, #0
 8001470:	d075      	beq.n	800155e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001472:	4b59      	ldr	r3, [pc, #356]	@ (80015d8 <HAL_RCC_OscConfig+0x27c>)
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	f003 030c 	and.w	r3, r3, #12
 800147a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800147c:	4b56      	ldr	r3, [pc, #344]	@ (80015d8 <HAL_RCC_OscConfig+0x27c>)
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	f003 0303 	and.w	r3, r3, #3
 8001484:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	2b0c      	cmp	r3, #12
 800148a:	d102      	bne.n	8001492 <HAL_RCC_OscConfig+0x136>
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	2b02      	cmp	r3, #2
 8001490:	d002      	beq.n	8001498 <HAL_RCC_OscConfig+0x13c>
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	2b04      	cmp	r3, #4
 8001496:	d11f      	bne.n	80014d8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001498:	4b4f      	ldr	r3, [pc, #316]	@ (80015d8 <HAL_RCC_OscConfig+0x27c>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d005      	beq.n	80014b0 <HAL_RCC_OscConfig+0x154>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d101      	bne.n	80014b0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e25d      	b.n	800196c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014b0:	4b49      	ldr	r3, [pc, #292]	@ (80015d8 <HAL_RCC_OscConfig+0x27c>)
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	691b      	ldr	r3, [r3, #16]
 80014bc:	061b      	lsls	r3, r3, #24
 80014be:	4946      	ldr	r1, [pc, #280]	@ (80015d8 <HAL_RCC_OscConfig+0x27c>)
 80014c0:	4313      	orrs	r3, r2
 80014c2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80014c4:	4b45      	ldr	r3, [pc, #276]	@ (80015dc <HAL_RCC_OscConfig+0x280>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff fafd 	bl	8000ac8 <HAL_InitTick>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d043      	beq.n	800155c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e249      	b.n	800196c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d023      	beq.n	8001528 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014e0:	4b3d      	ldr	r3, [pc, #244]	@ (80015d8 <HAL_RCC_OscConfig+0x27c>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a3c      	ldr	r2, [pc, #240]	@ (80015d8 <HAL_RCC_OscConfig+0x27c>)
 80014e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ec:	f7ff fb38 	bl	8000b60 <HAL_GetTick>
 80014f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014f2:	e008      	b.n	8001506 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014f4:	f7ff fb34 	bl	8000b60 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e232      	b.n	800196c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001506:	4b34      	ldr	r3, [pc, #208]	@ (80015d8 <HAL_RCC_OscConfig+0x27c>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800150e:	2b00      	cmp	r3, #0
 8001510:	d0f0      	beq.n	80014f4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001512:	4b31      	ldr	r3, [pc, #196]	@ (80015d8 <HAL_RCC_OscConfig+0x27c>)
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	691b      	ldr	r3, [r3, #16]
 800151e:	061b      	lsls	r3, r3, #24
 8001520:	492d      	ldr	r1, [pc, #180]	@ (80015d8 <HAL_RCC_OscConfig+0x27c>)
 8001522:	4313      	orrs	r3, r2
 8001524:	604b      	str	r3, [r1, #4]
 8001526:	e01a      	b.n	800155e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001528:	4b2b      	ldr	r3, [pc, #172]	@ (80015d8 <HAL_RCC_OscConfig+0x27c>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a2a      	ldr	r2, [pc, #168]	@ (80015d8 <HAL_RCC_OscConfig+0x27c>)
 800152e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001532:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001534:	f7ff fb14 	bl	8000b60 <HAL_GetTick>
 8001538:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800153a:	e008      	b.n	800154e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800153c:	f7ff fb10 	bl	8000b60 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e20e      	b.n	800196c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800154e:	4b22      	ldr	r3, [pc, #136]	@ (80015d8 <HAL_RCC_OscConfig+0x27c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1f0      	bne.n	800153c <HAL_RCC_OscConfig+0x1e0>
 800155a:	e000      	b.n	800155e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800155c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0308 	and.w	r3, r3, #8
 8001566:	2b00      	cmp	r3, #0
 8001568:	d041      	beq.n	80015ee <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	695b      	ldr	r3, [r3, #20]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d01c      	beq.n	80015ac <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001572:	4b19      	ldr	r3, [pc, #100]	@ (80015d8 <HAL_RCC_OscConfig+0x27c>)
 8001574:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001578:	4a17      	ldr	r2, [pc, #92]	@ (80015d8 <HAL_RCC_OscConfig+0x27c>)
 800157a:	f043 0301 	orr.w	r3, r3, #1
 800157e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001582:	f7ff faed 	bl	8000b60 <HAL_GetTick>
 8001586:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001588:	e008      	b.n	800159c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800158a:	f7ff fae9 	bl	8000b60 <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e1e7      	b.n	800196c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800159c:	4b0e      	ldr	r3, [pc, #56]	@ (80015d8 <HAL_RCC_OscConfig+0x27c>)
 800159e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d0ef      	beq.n	800158a <HAL_RCC_OscConfig+0x22e>
 80015aa:	e020      	b.n	80015ee <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015ac:	4b0a      	ldr	r3, [pc, #40]	@ (80015d8 <HAL_RCC_OscConfig+0x27c>)
 80015ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015b2:	4a09      	ldr	r2, [pc, #36]	@ (80015d8 <HAL_RCC_OscConfig+0x27c>)
 80015b4:	f023 0301 	bic.w	r3, r3, #1
 80015b8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015bc:	f7ff fad0 	bl	8000b60 <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015c2:	e00d      	b.n	80015e0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015c4:	f7ff facc 	bl	8000b60 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d906      	bls.n	80015e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e1ca      	b.n	800196c <HAL_RCC_OscConfig+0x610>
 80015d6:	bf00      	nop
 80015d8:	40021000 	.word	0x40021000
 80015dc:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015e0:	4b8c      	ldr	r3, [pc, #560]	@ (8001814 <HAL_RCC_OscConfig+0x4b8>)
 80015e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d1ea      	bne.n	80015c4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0304 	and.w	r3, r3, #4
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f000 80a6 	beq.w	8001748 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015fc:	2300      	movs	r3, #0
 80015fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001600:	4b84      	ldr	r3, [pc, #528]	@ (8001814 <HAL_RCC_OscConfig+0x4b8>)
 8001602:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001604:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d101      	bne.n	8001610 <HAL_RCC_OscConfig+0x2b4>
 800160c:	2301      	movs	r3, #1
 800160e:	e000      	b.n	8001612 <HAL_RCC_OscConfig+0x2b6>
 8001610:	2300      	movs	r3, #0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d00d      	beq.n	8001632 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001616:	4b7f      	ldr	r3, [pc, #508]	@ (8001814 <HAL_RCC_OscConfig+0x4b8>)
 8001618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800161a:	4a7e      	ldr	r2, [pc, #504]	@ (8001814 <HAL_RCC_OscConfig+0x4b8>)
 800161c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001620:	6593      	str	r3, [r2, #88]	@ 0x58
 8001622:	4b7c      	ldr	r3, [pc, #496]	@ (8001814 <HAL_RCC_OscConfig+0x4b8>)
 8001624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001626:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800162e:	2301      	movs	r3, #1
 8001630:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001632:	4b79      	ldr	r3, [pc, #484]	@ (8001818 <HAL_RCC_OscConfig+0x4bc>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800163a:	2b00      	cmp	r3, #0
 800163c:	d118      	bne.n	8001670 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800163e:	4b76      	ldr	r3, [pc, #472]	@ (8001818 <HAL_RCC_OscConfig+0x4bc>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a75      	ldr	r2, [pc, #468]	@ (8001818 <HAL_RCC_OscConfig+0x4bc>)
 8001644:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001648:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800164a:	f7ff fa89 	bl	8000b60 <HAL_GetTick>
 800164e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001650:	e008      	b.n	8001664 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001652:	f7ff fa85 	bl	8000b60 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e183      	b.n	800196c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001664:	4b6c      	ldr	r3, [pc, #432]	@ (8001818 <HAL_RCC_OscConfig+0x4bc>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800166c:	2b00      	cmp	r3, #0
 800166e:	d0f0      	beq.n	8001652 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d108      	bne.n	800168a <HAL_RCC_OscConfig+0x32e>
 8001678:	4b66      	ldr	r3, [pc, #408]	@ (8001814 <HAL_RCC_OscConfig+0x4b8>)
 800167a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800167e:	4a65      	ldr	r2, [pc, #404]	@ (8001814 <HAL_RCC_OscConfig+0x4b8>)
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001688:	e024      	b.n	80016d4 <HAL_RCC_OscConfig+0x378>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	2b05      	cmp	r3, #5
 8001690:	d110      	bne.n	80016b4 <HAL_RCC_OscConfig+0x358>
 8001692:	4b60      	ldr	r3, [pc, #384]	@ (8001814 <HAL_RCC_OscConfig+0x4b8>)
 8001694:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001698:	4a5e      	ldr	r2, [pc, #376]	@ (8001814 <HAL_RCC_OscConfig+0x4b8>)
 800169a:	f043 0304 	orr.w	r3, r3, #4
 800169e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016a2:	4b5c      	ldr	r3, [pc, #368]	@ (8001814 <HAL_RCC_OscConfig+0x4b8>)
 80016a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016a8:	4a5a      	ldr	r2, [pc, #360]	@ (8001814 <HAL_RCC_OscConfig+0x4b8>)
 80016aa:	f043 0301 	orr.w	r3, r3, #1
 80016ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016b2:	e00f      	b.n	80016d4 <HAL_RCC_OscConfig+0x378>
 80016b4:	4b57      	ldr	r3, [pc, #348]	@ (8001814 <HAL_RCC_OscConfig+0x4b8>)
 80016b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016ba:	4a56      	ldr	r2, [pc, #344]	@ (8001814 <HAL_RCC_OscConfig+0x4b8>)
 80016bc:	f023 0301 	bic.w	r3, r3, #1
 80016c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016c4:	4b53      	ldr	r3, [pc, #332]	@ (8001814 <HAL_RCC_OscConfig+0x4b8>)
 80016c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016ca:	4a52      	ldr	r2, [pc, #328]	@ (8001814 <HAL_RCC_OscConfig+0x4b8>)
 80016cc:	f023 0304 	bic.w	r3, r3, #4
 80016d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d016      	beq.n	800170a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016dc:	f7ff fa40 	bl	8000b60 <HAL_GetTick>
 80016e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016e2:	e00a      	b.n	80016fa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016e4:	f7ff fa3c 	bl	8000b60 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e138      	b.n	800196c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016fa:	4b46      	ldr	r3, [pc, #280]	@ (8001814 <HAL_RCC_OscConfig+0x4b8>)
 80016fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001700:	f003 0302 	and.w	r3, r3, #2
 8001704:	2b00      	cmp	r3, #0
 8001706:	d0ed      	beq.n	80016e4 <HAL_RCC_OscConfig+0x388>
 8001708:	e015      	b.n	8001736 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800170a:	f7ff fa29 	bl	8000b60 <HAL_GetTick>
 800170e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001710:	e00a      	b.n	8001728 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001712:	f7ff fa25 	bl	8000b60 <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001720:	4293      	cmp	r3, r2
 8001722:	d901      	bls.n	8001728 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e121      	b.n	800196c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001728:	4b3a      	ldr	r3, [pc, #232]	@ (8001814 <HAL_RCC_OscConfig+0x4b8>)
 800172a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d1ed      	bne.n	8001712 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001736:	7ffb      	ldrb	r3, [r7, #31]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d105      	bne.n	8001748 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800173c:	4b35      	ldr	r3, [pc, #212]	@ (8001814 <HAL_RCC_OscConfig+0x4b8>)
 800173e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001740:	4a34      	ldr	r2, [pc, #208]	@ (8001814 <HAL_RCC_OscConfig+0x4b8>)
 8001742:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001746:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0320 	and.w	r3, r3, #32
 8001750:	2b00      	cmp	r3, #0
 8001752:	d03c      	beq.n	80017ce <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d01c      	beq.n	8001796 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800175c:	4b2d      	ldr	r3, [pc, #180]	@ (8001814 <HAL_RCC_OscConfig+0x4b8>)
 800175e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001762:	4a2c      	ldr	r2, [pc, #176]	@ (8001814 <HAL_RCC_OscConfig+0x4b8>)
 8001764:	f043 0301 	orr.w	r3, r3, #1
 8001768:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800176c:	f7ff f9f8 	bl	8000b60 <HAL_GetTick>
 8001770:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001772:	e008      	b.n	8001786 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001774:	f7ff f9f4 	bl	8000b60 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b02      	cmp	r3, #2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e0f2      	b.n	800196c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001786:	4b23      	ldr	r3, [pc, #140]	@ (8001814 <HAL_RCC_OscConfig+0x4b8>)
 8001788:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800178c:	f003 0302 	and.w	r3, r3, #2
 8001790:	2b00      	cmp	r3, #0
 8001792:	d0ef      	beq.n	8001774 <HAL_RCC_OscConfig+0x418>
 8001794:	e01b      	b.n	80017ce <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001796:	4b1f      	ldr	r3, [pc, #124]	@ (8001814 <HAL_RCC_OscConfig+0x4b8>)
 8001798:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800179c:	4a1d      	ldr	r2, [pc, #116]	@ (8001814 <HAL_RCC_OscConfig+0x4b8>)
 800179e:	f023 0301 	bic.w	r3, r3, #1
 80017a2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a6:	f7ff f9db 	bl	8000b60 <HAL_GetTick>
 80017aa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017ac:	e008      	b.n	80017c0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017ae:	f7ff f9d7 	bl	8000b60 <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d901      	bls.n	80017c0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e0d5      	b.n	800196c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017c0:	4b14      	ldr	r3, [pc, #80]	@ (8001814 <HAL_RCC_OscConfig+0x4b8>)
 80017c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1ef      	bne.n	80017ae <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	69db      	ldr	r3, [r3, #28]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	f000 80c9 	beq.w	800196a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001814 <HAL_RCC_OscConfig+0x4b8>)
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f003 030c 	and.w	r3, r3, #12
 80017e0:	2b0c      	cmp	r3, #12
 80017e2:	f000 8083 	beq.w	80018ec <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	69db      	ldr	r3, [r3, #28]
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d15e      	bne.n	80018ac <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ee:	4b09      	ldr	r3, [pc, #36]	@ (8001814 <HAL_RCC_OscConfig+0x4b8>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a08      	ldr	r2, [pc, #32]	@ (8001814 <HAL_RCC_OscConfig+0x4b8>)
 80017f4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80017f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017fa:	f7ff f9b1 	bl	8000b60 <HAL_GetTick>
 80017fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001800:	e00c      	b.n	800181c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001802:	f7ff f9ad 	bl	8000b60 <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d905      	bls.n	800181c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e0ab      	b.n	800196c <HAL_RCC_OscConfig+0x610>
 8001814:	40021000 	.word	0x40021000
 8001818:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800181c:	4b55      	ldr	r3, [pc, #340]	@ (8001974 <HAL_RCC_OscConfig+0x618>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d1ec      	bne.n	8001802 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001828:	4b52      	ldr	r3, [pc, #328]	@ (8001974 <HAL_RCC_OscConfig+0x618>)
 800182a:	68da      	ldr	r2, [r3, #12]
 800182c:	4b52      	ldr	r3, [pc, #328]	@ (8001978 <HAL_RCC_OscConfig+0x61c>)
 800182e:	4013      	ands	r3, r2
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	6a11      	ldr	r1, [r2, #32]
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001838:	3a01      	subs	r2, #1
 800183a:	0112      	lsls	r2, r2, #4
 800183c:	4311      	orrs	r1, r2
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001842:	0212      	lsls	r2, r2, #8
 8001844:	4311      	orrs	r1, r2
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800184a:	0852      	lsrs	r2, r2, #1
 800184c:	3a01      	subs	r2, #1
 800184e:	0552      	lsls	r2, r2, #21
 8001850:	4311      	orrs	r1, r2
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001856:	0852      	lsrs	r2, r2, #1
 8001858:	3a01      	subs	r2, #1
 800185a:	0652      	lsls	r2, r2, #25
 800185c:	4311      	orrs	r1, r2
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001862:	06d2      	lsls	r2, r2, #27
 8001864:	430a      	orrs	r2, r1
 8001866:	4943      	ldr	r1, [pc, #268]	@ (8001974 <HAL_RCC_OscConfig+0x618>)
 8001868:	4313      	orrs	r3, r2
 800186a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800186c:	4b41      	ldr	r3, [pc, #260]	@ (8001974 <HAL_RCC_OscConfig+0x618>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a40      	ldr	r2, [pc, #256]	@ (8001974 <HAL_RCC_OscConfig+0x618>)
 8001872:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001876:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001878:	4b3e      	ldr	r3, [pc, #248]	@ (8001974 <HAL_RCC_OscConfig+0x618>)
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	4a3d      	ldr	r2, [pc, #244]	@ (8001974 <HAL_RCC_OscConfig+0x618>)
 800187e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001882:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001884:	f7ff f96c 	bl	8000b60 <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800188c:	f7ff f968 	bl	8000b60 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e066      	b.n	800196c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800189e:	4b35      	ldr	r3, [pc, #212]	@ (8001974 <HAL_RCC_OscConfig+0x618>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d0f0      	beq.n	800188c <HAL_RCC_OscConfig+0x530>
 80018aa:	e05e      	b.n	800196a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ac:	4b31      	ldr	r3, [pc, #196]	@ (8001974 <HAL_RCC_OscConfig+0x618>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a30      	ldr	r2, [pc, #192]	@ (8001974 <HAL_RCC_OscConfig+0x618>)
 80018b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b8:	f7ff f952 	bl	8000b60 <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018c0:	f7ff f94e 	bl	8000b60 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e04c      	b.n	800196c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018d2:	4b28      	ldr	r3, [pc, #160]	@ (8001974 <HAL_RCC_OscConfig+0x618>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1f0      	bne.n	80018c0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80018de:	4b25      	ldr	r3, [pc, #148]	@ (8001974 <HAL_RCC_OscConfig+0x618>)
 80018e0:	68da      	ldr	r2, [r3, #12]
 80018e2:	4924      	ldr	r1, [pc, #144]	@ (8001974 <HAL_RCC_OscConfig+0x618>)
 80018e4:	4b25      	ldr	r3, [pc, #148]	@ (800197c <HAL_RCC_OscConfig+0x620>)
 80018e6:	4013      	ands	r3, r2
 80018e8:	60cb      	str	r3, [r1, #12]
 80018ea:	e03e      	b.n	800196a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	69db      	ldr	r3, [r3, #28]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d101      	bne.n	80018f8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e039      	b.n	800196c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80018f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001974 <HAL_RCC_OscConfig+0x618>)
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	f003 0203 	and.w	r2, r3, #3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a1b      	ldr	r3, [r3, #32]
 8001908:	429a      	cmp	r2, r3
 800190a:	d12c      	bne.n	8001966 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001916:	3b01      	subs	r3, #1
 8001918:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800191a:	429a      	cmp	r2, r3
 800191c:	d123      	bne.n	8001966 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001928:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800192a:	429a      	cmp	r2, r3
 800192c:	d11b      	bne.n	8001966 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001938:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800193a:	429a      	cmp	r2, r3
 800193c:	d113      	bne.n	8001966 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001948:	085b      	lsrs	r3, r3, #1
 800194a:	3b01      	subs	r3, #1
 800194c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800194e:	429a      	cmp	r2, r3
 8001950:	d109      	bne.n	8001966 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800195c:	085b      	lsrs	r3, r3, #1
 800195e:	3b01      	subs	r3, #1
 8001960:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001962:	429a      	cmp	r2, r3
 8001964:	d001      	beq.n	800196a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e000      	b.n	800196c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800196a:	2300      	movs	r3, #0
}
 800196c:	4618      	mov	r0, r3
 800196e:	3720      	adds	r7, #32
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	40021000 	.word	0x40021000
 8001978:	019f800c 	.word	0x019f800c
 800197c:	feeefffc 	.word	0xfeeefffc

08001980 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800198a:	2300      	movs	r3, #0
 800198c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d101      	bne.n	8001998 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e11e      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001998:	4b91      	ldr	r3, [pc, #580]	@ (8001be0 <HAL_RCC_ClockConfig+0x260>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 030f 	and.w	r3, r3, #15
 80019a0:	683a      	ldr	r2, [r7, #0]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d910      	bls.n	80019c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019a6:	4b8e      	ldr	r3, [pc, #568]	@ (8001be0 <HAL_RCC_ClockConfig+0x260>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f023 020f 	bic.w	r2, r3, #15
 80019ae:	498c      	ldr	r1, [pc, #560]	@ (8001be0 <HAL_RCC_ClockConfig+0x260>)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019b6:	4b8a      	ldr	r3, [pc, #552]	@ (8001be0 <HAL_RCC_ClockConfig+0x260>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 030f 	and.w	r3, r3, #15
 80019be:	683a      	ldr	r2, [r7, #0]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d001      	beq.n	80019c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e106      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d073      	beq.n	8001abc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	2b03      	cmp	r3, #3
 80019da:	d129      	bne.n	8001a30 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019dc:	4b81      	ldr	r3, [pc, #516]	@ (8001be4 <HAL_RCC_ClockConfig+0x264>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d101      	bne.n	80019ec <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e0f4      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80019ec:	f000 f99e 	bl	8001d2c <RCC_GetSysClockFreqFromPLLSource>
 80019f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	4a7c      	ldr	r2, [pc, #496]	@ (8001be8 <HAL_RCC_ClockConfig+0x268>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d93f      	bls.n	8001a7a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80019fa:	4b7a      	ldr	r3, [pc, #488]	@ (8001be4 <HAL_RCC_ClockConfig+0x264>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d009      	beq.n	8001a1a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d033      	beq.n	8001a7a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d12f      	bne.n	8001a7a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001a1a:	4b72      	ldr	r3, [pc, #456]	@ (8001be4 <HAL_RCC_ClockConfig+0x264>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001a22:	4a70      	ldr	r2, [pc, #448]	@ (8001be4 <HAL_RCC_ClockConfig+0x264>)
 8001a24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a28:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001a2a:	2380      	movs	r3, #128	@ 0x80
 8001a2c:	617b      	str	r3, [r7, #20]
 8001a2e:	e024      	b.n	8001a7a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d107      	bne.n	8001a48 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a38:	4b6a      	ldr	r3, [pc, #424]	@ (8001be4 <HAL_RCC_ClockConfig+0x264>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d109      	bne.n	8001a58 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e0c6      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a48:	4b66      	ldr	r3, [pc, #408]	@ (8001be4 <HAL_RCC_ClockConfig+0x264>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d101      	bne.n	8001a58 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e0be      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001a58:	f000 f8ce 	bl	8001bf8 <HAL_RCC_GetSysClockFreq>
 8001a5c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	4a61      	ldr	r2, [pc, #388]	@ (8001be8 <HAL_RCC_ClockConfig+0x268>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d909      	bls.n	8001a7a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001a66:	4b5f      	ldr	r3, [pc, #380]	@ (8001be4 <HAL_RCC_ClockConfig+0x264>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001a6e:	4a5d      	ldr	r2, [pc, #372]	@ (8001be4 <HAL_RCC_ClockConfig+0x264>)
 8001a70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a74:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001a76:	2380      	movs	r3, #128	@ 0x80
 8001a78:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a7a:	4b5a      	ldr	r3, [pc, #360]	@ (8001be4 <HAL_RCC_ClockConfig+0x264>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f023 0203 	bic.w	r2, r3, #3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	4957      	ldr	r1, [pc, #348]	@ (8001be4 <HAL_RCC_ClockConfig+0x264>)
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a8c:	f7ff f868 	bl	8000b60 <HAL_GetTick>
 8001a90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a92:	e00a      	b.n	8001aaa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a94:	f7ff f864 	bl	8000b60 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e095      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aaa:	4b4e      	ldr	r3, [pc, #312]	@ (8001be4 <HAL_RCC_ClockConfig+0x264>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f003 020c 	and.w	r2, r3, #12
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d1eb      	bne.n	8001a94 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0302 	and.w	r3, r3, #2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d023      	beq.n	8001b10 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0304 	and.w	r3, r3, #4
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d005      	beq.n	8001ae0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ad4:	4b43      	ldr	r3, [pc, #268]	@ (8001be4 <HAL_RCC_ClockConfig+0x264>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	4a42      	ldr	r2, [pc, #264]	@ (8001be4 <HAL_RCC_ClockConfig+0x264>)
 8001ada:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001ade:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0308 	and.w	r3, r3, #8
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d007      	beq.n	8001afc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001aec:	4b3d      	ldr	r3, [pc, #244]	@ (8001be4 <HAL_RCC_ClockConfig+0x264>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001af4:	4a3b      	ldr	r2, [pc, #236]	@ (8001be4 <HAL_RCC_ClockConfig+0x264>)
 8001af6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001afa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001afc:	4b39      	ldr	r3, [pc, #228]	@ (8001be4 <HAL_RCC_ClockConfig+0x264>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	4936      	ldr	r1, [pc, #216]	@ (8001be4 <HAL_RCC_ClockConfig+0x264>)
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	608b      	str	r3, [r1, #8]
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	2b80      	cmp	r3, #128	@ 0x80
 8001b14:	d105      	bne.n	8001b22 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001b16:	4b33      	ldr	r3, [pc, #204]	@ (8001be4 <HAL_RCC_ClockConfig+0x264>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	4a32      	ldr	r2, [pc, #200]	@ (8001be4 <HAL_RCC_ClockConfig+0x264>)
 8001b1c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001b20:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b22:	4b2f      	ldr	r3, [pc, #188]	@ (8001be0 <HAL_RCC_ClockConfig+0x260>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 030f 	and.w	r3, r3, #15
 8001b2a:	683a      	ldr	r2, [r7, #0]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d21d      	bcs.n	8001b6c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b30:	4b2b      	ldr	r3, [pc, #172]	@ (8001be0 <HAL_RCC_ClockConfig+0x260>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f023 020f 	bic.w	r2, r3, #15
 8001b38:	4929      	ldr	r1, [pc, #164]	@ (8001be0 <HAL_RCC_ClockConfig+0x260>)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b40:	f7ff f80e 	bl	8000b60 <HAL_GetTick>
 8001b44:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b46:	e00a      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b48:	f7ff f80a 	bl	8000b60 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e03b      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b5e:	4b20      	ldr	r3, [pc, #128]	@ (8001be0 <HAL_RCC_ClockConfig+0x260>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 030f 	and.w	r3, r3, #15
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d1ed      	bne.n	8001b48 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0304 	and.w	r3, r3, #4
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d008      	beq.n	8001b8a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b78:	4b1a      	ldr	r3, [pc, #104]	@ (8001be4 <HAL_RCC_ClockConfig+0x264>)
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	4917      	ldr	r1, [pc, #92]	@ (8001be4 <HAL_RCC_ClockConfig+0x264>)
 8001b86:	4313      	orrs	r3, r2
 8001b88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0308 	and.w	r3, r3, #8
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d009      	beq.n	8001baa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b96:	4b13      	ldr	r3, [pc, #76]	@ (8001be4 <HAL_RCC_ClockConfig+0x264>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	691b      	ldr	r3, [r3, #16]
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	490f      	ldr	r1, [pc, #60]	@ (8001be4 <HAL_RCC_ClockConfig+0x264>)
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001baa:	f000 f825 	bl	8001bf8 <HAL_RCC_GetSysClockFreq>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8001be4 <HAL_RCC_ClockConfig+0x264>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	091b      	lsrs	r3, r3, #4
 8001bb6:	f003 030f 	and.w	r3, r3, #15
 8001bba:	490c      	ldr	r1, [pc, #48]	@ (8001bec <HAL_RCC_ClockConfig+0x26c>)
 8001bbc:	5ccb      	ldrb	r3, [r1, r3]
 8001bbe:	f003 031f 	and.w	r3, r3, #31
 8001bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc6:	4a0a      	ldr	r2, [pc, #40]	@ (8001bf0 <HAL_RCC_ClockConfig+0x270>)
 8001bc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001bca:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf4 <HAL_RCC_ClockConfig+0x274>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7fe ff7a 	bl	8000ac8 <HAL_InitTick>
 8001bd4:	4603      	mov	r3, r0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3718      	adds	r7, #24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40022000 	.word	0x40022000
 8001be4:	40021000 	.word	0x40021000
 8001be8:	04c4b400 	.word	0x04c4b400
 8001bec:	08004160 	.word	0x08004160
 8001bf0:	20000010 	.word	0x20000010
 8001bf4:	20000014 	.word	0x20000014

08001bf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b087      	sub	sp, #28
 8001bfc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001bfe:	4b2c      	ldr	r3, [pc, #176]	@ (8001cb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f003 030c 	and.w	r3, r3, #12
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	d102      	bne.n	8001c10 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c0a:	4b2a      	ldr	r3, [pc, #168]	@ (8001cb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c0c:	613b      	str	r3, [r7, #16]
 8001c0e:	e047      	b.n	8001ca0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001c10:	4b27      	ldr	r3, [pc, #156]	@ (8001cb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 030c 	and.w	r3, r3, #12
 8001c18:	2b08      	cmp	r3, #8
 8001c1a:	d102      	bne.n	8001c22 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c1c:	4b26      	ldr	r3, [pc, #152]	@ (8001cb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c1e:	613b      	str	r3, [r7, #16]
 8001c20:	e03e      	b.n	8001ca0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001c22:	4b23      	ldr	r3, [pc, #140]	@ (8001cb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f003 030c 	and.w	r3, r3, #12
 8001c2a:	2b0c      	cmp	r3, #12
 8001c2c:	d136      	bne.n	8001c9c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c2e:	4b20      	ldr	r3, [pc, #128]	@ (8001cb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	f003 0303 	and.w	r3, r3, #3
 8001c36:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c38:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	091b      	lsrs	r3, r3, #4
 8001c3e:	f003 030f 	and.w	r3, r3, #15
 8001c42:	3301      	adds	r3, #1
 8001c44:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2b03      	cmp	r3, #3
 8001c4a:	d10c      	bne.n	8001c66 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c4c:	4a1a      	ldr	r2, [pc, #104]	@ (8001cb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c54:	4a16      	ldr	r2, [pc, #88]	@ (8001cb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c56:	68d2      	ldr	r2, [r2, #12]
 8001c58:	0a12      	lsrs	r2, r2, #8
 8001c5a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001c5e:	fb02 f303 	mul.w	r3, r2, r3
 8001c62:	617b      	str	r3, [r7, #20]
      break;
 8001c64:	e00c      	b.n	8001c80 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c66:	4a13      	ldr	r2, [pc, #76]	@ (8001cb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c6e:	4a10      	ldr	r2, [pc, #64]	@ (8001cb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c70:	68d2      	ldr	r2, [r2, #12]
 8001c72:	0a12      	lsrs	r2, r2, #8
 8001c74:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001c78:	fb02 f303 	mul.w	r3, r2, r3
 8001c7c:	617b      	str	r3, [r7, #20]
      break;
 8001c7e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c80:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	0e5b      	lsrs	r3, r3, #25
 8001c86:	f003 0303 	and.w	r3, r3, #3
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001c90:	697a      	ldr	r2, [r7, #20]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c98:	613b      	str	r3, [r7, #16]
 8001c9a:	e001      	b.n	8001ca0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001ca0:	693b      	ldr	r3, [r7, #16]
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	371c      	adds	r7, #28
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	00f42400 	.word	0x00f42400
 8001cb8:	016e3600 	.word	0x016e3600

08001cbc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cc0:	4b03      	ldr	r3, [pc, #12]	@ (8001cd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	20000010 	.word	0x20000010

08001cd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001cd8:	f7ff fff0 	bl	8001cbc <HAL_RCC_GetHCLKFreq>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	4b06      	ldr	r3, [pc, #24]	@ (8001cf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	0a1b      	lsrs	r3, r3, #8
 8001ce4:	f003 0307 	and.w	r3, r3, #7
 8001ce8:	4904      	ldr	r1, [pc, #16]	@ (8001cfc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001cea:	5ccb      	ldrb	r3, [r1, r3]
 8001cec:	f003 031f 	and.w	r3, r3, #31
 8001cf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	08004170 	.word	0x08004170

08001d00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d04:	f7ff ffda 	bl	8001cbc <HAL_RCC_GetHCLKFreq>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	4b06      	ldr	r3, [pc, #24]	@ (8001d24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	0adb      	lsrs	r3, r3, #11
 8001d10:	f003 0307 	and.w	r3, r3, #7
 8001d14:	4904      	ldr	r1, [pc, #16]	@ (8001d28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d16:	5ccb      	ldrb	r3, [r1, r3]
 8001d18:	f003 031f 	and.w	r3, r3, #31
 8001d1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40021000 	.word	0x40021000
 8001d28:	08004170 	.word	0x08004170

08001d2c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b087      	sub	sp, #28
 8001d30:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d32:	4b1e      	ldr	r3, [pc, #120]	@ (8001dac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	f003 0303 	and.w	r3, r3, #3
 8001d3a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d3c:	4b1b      	ldr	r3, [pc, #108]	@ (8001dac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	091b      	lsrs	r3, r3, #4
 8001d42:	f003 030f 	and.w	r3, r3, #15
 8001d46:	3301      	adds	r3, #1
 8001d48:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	2b03      	cmp	r3, #3
 8001d4e:	d10c      	bne.n	8001d6a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d50:	4a17      	ldr	r2, [pc, #92]	@ (8001db0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d58:	4a14      	ldr	r2, [pc, #80]	@ (8001dac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d5a:	68d2      	ldr	r2, [r2, #12]
 8001d5c:	0a12      	lsrs	r2, r2, #8
 8001d5e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001d62:	fb02 f303 	mul.w	r3, r2, r3
 8001d66:	617b      	str	r3, [r7, #20]
    break;
 8001d68:	e00c      	b.n	8001d84 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d6a:	4a12      	ldr	r2, [pc, #72]	@ (8001db4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d72:	4a0e      	ldr	r2, [pc, #56]	@ (8001dac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d74:	68d2      	ldr	r2, [r2, #12]
 8001d76:	0a12      	lsrs	r2, r2, #8
 8001d78:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001d7c:	fb02 f303 	mul.w	r3, r2, r3
 8001d80:	617b      	str	r3, [r7, #20]
    break;
 8001d82:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d84:	4b09      	ldr	r3, [pc, #36]	@ (8001dac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	0e5b      	lsrs	r3, r3, #25
 8001d8a:	f003 0303 	and.w	r3, r3, #3
 8001d8e:	3301      	adds	r3, #1
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001d94:	697a      	ldr	r2, [r7, #20]
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d9c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001d9e:	687b      	ldr	r3, [r7, #4]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	371c      	adds	r7, #28
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	40021000 	.word	0x40021000
 8001db0:	016e3600 	.word	0x016e3600
 8001db4:	00f42400 	.word	0x00f42400

08001db8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	f000 8098 	beq.w	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dda:	4b43      	ldr	r3, [pc, #268]	@ (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d10d      	bne.n	8001e02 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001de6:	4b40      	ldr	r3, [pc, #256]	@ (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001de8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dea:	4a3f      	ldr	r2, [pc, #252]	@ (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001dec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001df0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001df2:	4b3d      	ldr	r3, [pc, #244]	@ (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001df6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dfa:	60bb      	str	r3, [r7, #8]
 8001dfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e02:	4b3a      	ldr	r3, [pc, #232]	@ (8001eec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a39      	ldr	r2, [pc, #228]	@ (8001eec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001e08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e0c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e0e:	f7fe fea7 	bl	8000b60 <HAL_GetTick>
 8001e12:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e14:	e009      	b.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e16:	f7fe fea3 	bl	8000b60 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d902      	bls.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	74fb      	strb	r3, [r7, #19]
        break;
 8001e28:	e005      	b.n	8001e36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e2a:	4b30      	ldr	r3, [pc, #192]	@ (8001eec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d0ef      	beq.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001e36:	7cfb      	ldrb	r3, [r7, #19]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d159      	bne.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001e3c:	4b2a      	ldr	r3, [pc, #168]	@ (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e46:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d01e      	beq.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e52:	697a      	ldr	r2, [r7, #20]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d019      	beq.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e58:	4b23      	ldr	r3, [pc, #140]	@ (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e62:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e64:	4b20      	ldr	r3, [pc, #128]	@ (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e6a:	4a1f      	ldr	r2, [pc, #124]	@ (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e74:	4b1c      	ldr	r3, [pc, #112]	@ (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e7a:	4a1b      	ldr	r2, [pc, #108]	@ (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e84:	4a18      	ldr	r2, [pc, #96]	@ (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d016      	beq.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e96:	f7fe fe63 	bl	8000b60 <HAL_GetTick>
 8001e9a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e9c:	e00b      	b.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e9e:	f7fe fe5f 	bl	8000b60 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d902      	bls.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	74fb      	strb	r3, [r7, #19]
            break;
 8001eb4:	e006      	b.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eb6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d0ec      	beq.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001ec4:	7cfb      	ldrb	r3, [r7, #19]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d10b      	bne.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001eca:	4b07      	ldr	r3, [pc, #28]	@ (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ed0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ed8:	4903      	ldr	r1, [pc, #12]	@ (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001eda:	4313      	orrs	r3, r2
 8001edc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001ee0:	e008      	b.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001ee2:	7cfb      	ldrb	r3, [r7, #19]
 8001ee4:	74bb      	strb	r3, [r7, #18]
 8001ee6:	e005      	b.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ef0:	7cfb      	ldrb	r3, [r7, #19]
 8001ef2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ef4:	7c7b      	ldrb	r3, [r7, #17]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d105      	bne.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001efa:	4ba7      	ldr	r3, [pc, #668]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001efc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001efe:	4aa6      	ldr	r2, [pc, #664]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f04:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d00a      	beq.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f12:	4ba1      	ldr	r3, [pc, #644]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f18:	f023 0203 	bic.w	r2, r3, #3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	499d      	ldr	r1, [pc, #628]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d00a      	beq.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f34:	4b98      	ldr	r3, [pc, #608]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f3a:	f023 020c 	bic.w	r2, r3, #12
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	4995      	ldr	r1, [pc, #596]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f44:	4313      	orrs	r3, r2
 8001f46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0304 	and.w	r3, r3, #4
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d00a      	beq.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f56:	4b90      	ldr	r3, [pc, #576]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f5c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	498c      	ldr	r1, [pc, #560]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0308 	and.w	r3, r3, #8
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d00a      	beq.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f78:	4b87      	ldr	r3, [pc, #540]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f7e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	4984      	ldr	r1, [pc, #528]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0310 	and.w	r3, r3, #16
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d00a      	beq.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001f9a:	4b7f      	ldr	r3, [pc, #508]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fa0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	695b      	ldr	r3, [r3, #20]
 8001fa8:	497b      	ldr	r1, [pc, #492]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001faa:	4313      	orrs	r3, r2
 8001fac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0320 	and.w	r3, r3, #32
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d00a      	beq.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001fbc:	4b76      	ldr	r3, [pc, #472]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fc2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	4973      	ldr	r1, [pc, #460]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d00a      	beq.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001fde:	4b6e      	ldr	r3, [pc, #440]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fe4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	69db      	ldr	r3, [r3, #28]
 8001fec:	496a      	ldr	r1, [pc, #424]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d00a      	beq.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002000:	4b65      	ldr	r3, [pc, #404]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002002:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002006:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a1b      	ldr	r3, [r3, #32]
 800200e:	4962      	ldr	r1, [pc, #392]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002010:	4313      	orrs	r3, r2
 8002012:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00a      	beq.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002022:	4b5d      	ldr	r3, [pc, #372]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002024:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002028:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002030:	4959      	ldr	r1, [pc, #356]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002032:	4313      	orrs	r3, r2
 8002034:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d00a      	beq.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002044:	4b54      	ldr	r3, [pc, #336]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002046:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800204a:	f023 0203 	bic.w	r2, r3, #3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002052:	4951      	ldr	r1, [pc, #324]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002054:	4313      	orrs	r3, r2
 8002056:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00a      	beq.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002066:	4b4c      	ldr	r3, [pc, #304]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002068:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800206c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002074:	4948      	ldr	r1, [pc, #288]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002076:	4313      	orrs	r3, r2
 8002078:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002084:	2b00      	cmp	r3, #0
 8002086:	d015      	beq.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002088:	4b43      	ldr	r3, [pc, #268]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800208a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800208e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002096:	4940      	ldr	r1, [pc, #256]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002098:	4313      	orrs	r3, r2
 800209a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80020a6:	d105      	bne.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020a8:	4b3b      	ldr	r3, [pc, #236]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	4a3a      	ldr	r2, [pc, #232]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80020b2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d015      	beq.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80020c0:	4b35      	ldr	r3, [pc, #212]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020c6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020ce:	4932      	ldr	r1, [pc, #200]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80020de:	d105      	bne.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020e0:	4b2d      	ldr	r3, [pc, #180]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	4a2c      	ldr	r2, [pc, #176]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80020ea:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d015      	beq.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80020f8:	4b27      	ldr	r3, [pc, #156]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020fe:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002106:	4924      	ldr	r1, [pc, #144]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002108:	4313      	orrs	r3, r2
 800210a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002112:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002116:	d105      	bne.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002118:	4b1f      	ldr	r3, [pc, #124]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	4a1e      	ldr	r2, [pc, #120]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800211e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002122:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d015      	beq.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002130:	4b19      	ldr	r3, [pc, #100]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002132:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002136:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800213e:	4916      	ldr	r1, [pc, #88]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002140:	4313      	orrs	r3, r2
 8002142:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800214a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800214e:	d105      	bne.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002150:	4b11      	ldr	r3, [pc, #68]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	4a10      	ldr	r2, [pc, #64]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002156:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800215a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d019      	beq.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002168:	4b0b      	ldr	r3, [pc, #44]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800216a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800216e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002176:	4908      	ldr	r1, [pc, #32]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002178:	4313      	orrs	r3, r2
 800217a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002182:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002186:	d109      	bne.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002188:	4b03      	ldr	r3, [pc, #12]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	4a02      	ldr	r2, [pc, #8]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800218e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002192:	60d3      	str	r3, [r2, #12]
 8002194:	e002      	b.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002196:	bf00      	nop
 8002198:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d015      	beq.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80021a8:	4b29      	ldr	r3, [pc, #164]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80021aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ae:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b6:	4926      	ldr	r1, [pc, #152]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80021c6:	d105      	bne.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80021c8:	4b21      	ldr	r3, [pc, #132]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	4a20      	ldr	r2, [pc, #128]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80021ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021d2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d015      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80021e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80021e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021e6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021ee:	4918      	ldr	r1, [pc, #96]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021fe:	d105      	bne.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002200:	4b13      	ldr	r3, [pc, #76]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	4a12      	ldr	r2, [pc, #72]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002206:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800220a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d015      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002218:	4b0d      	ldr	r3, [pc, #52]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800221a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800221e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002226:	490a      	ldr	r1, [pc, #40]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002228:	4313      	orrs	r3, r2
 800222a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002232:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002236:	d105      	bne.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002238:	4b05      	ldr	r3, [pc, #20]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	4a04      	ldr	r2, [pc, #16]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800223e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002242:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002244:	7cbb      	ldrb	r3, [r7, #18]
}
 8002246:	4618      	mov	r0, r3
 8002248:	3718      	adds	r7, #24
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	40021000 	.word	0x40021000

08002254 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e09d      	b.n	80023a2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800226a:	2b00      	cmp	r3, #0
 800226c:	d108      	bne.n	8002280 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002276:	d009      	beq.n	800228c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	61da      	str	r2, [r3, #28]
 800227e:	e005      	b.n	800228c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d106      	bne.n	80022ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f7fe fa68 	bl	800077c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2202      	movs	r2, #2
 80022b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80022c2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80022cc:	d902      	bls.n	80022d4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80022ce:	2300      	movs	r3, #0
 80022d0:	60fb      	str	r3, [r7, #12]
 80022d2:	e002      	b.n	80022da <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80022d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022d8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80022e2:	d007      	beq.n	80022f4 <HAL_SPI_Init+0xa0>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80022ec:	d002      	beq.n	80022f4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002304:	431a      	orrs	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	431a      	orrs	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	695b      	ldr	r3, [r3, #20]
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	431a      	orrs	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002322:	431a      	orrs	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	69db      	ldr	r3, [r3, #28]
 8002328:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800232c:	431a      	orrs	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002336:	ea42 0103 	orr.w	r1, r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800233e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	430a      	orrs	r2, r1
 8002348:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	0c1b      	lsrs	r3, r3, #16
 8002350:	f003 0204 	and.w	r2, r3, #4
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002358:	f003 0310 	and.w	r3, r3, #16
 800235c:	431a      	orrs	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002362:	f003 0308 	and.w	r3, r3, #8
 8002366:	431a      	orrs	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002370:	ea42 0103 	orr.w	r1, r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	430a      	orrs	r2, r1
 8002380:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	69da      	ldr	r2, [r3, #28]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002390:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3710      	adds	r7, #16
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b088      	sub	sp, #32
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	60f8      	str	r0, [r7, #12]
 80023b2:	60b9      	str	r1, [r7, #8]
 80023b4:	603b      	str	r3, [r7, #0]
 80023b6:	4613      	mov	r3, r2
 80023b8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80023ba:	f7fe fbd1 	bl	8000b60 <HAL_GetTick>
 80023be:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80023c0:	88fb      	ldrh	r3, [r7, #6]
 80023c2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d001      	beq.n	80023d4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80023d0:	2302      	movs	r3, #2
 80023d2:	e15c      	b.n	800268e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d002      	beq.n	80023e0 <HAL_SPI_Transmit+0x36>
 80023da:	88fb      	ldrh	r3, [r7, #6]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d101      	bne.n	80023e4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e154      	b.n	800268e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d101      	bne.n	80023f2 <HAL_SPI_Transmit+0x48>
 80023ee:	2302      	movs	r3, #2
 80023f0:	e14d      	b.n	800268e <HAL_SPI_Transmit+0x2e4>
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2201      	movs	r2, #1
 80023f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2203      	movs	r2, #3
 80023fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2200      	movs	r2, #0
 8002406:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	68ba      	ldr	r2, [r7, #8]
 800240c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	88fa      	ldrh	r2, [r7, #6]
 8002412:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	88fa      	ldrh	r2, [r7, #6]
 8002418:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2200      	movs	r2, #0
 800241e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2200      	movs	r2, #0
 8002424:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2200      	movs	r2, #0
 800242c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2200      	movs	r2, #0
 8002434:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2200      	movs	r2, #0
 800243a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002444:	d10f      	bne.n	8002466 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002454:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002464:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002470:	2b40      	cmp	r3, #64	@ 0x40
 8002472:	d007      	beq.n	8002484 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002482:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800248c:	d952      	bls.n	8002534 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d002      	beq.n	800249c <HAL_SPI_Transmit+0xf2>
 8002496:	8b7b      	ldrh	r3, [r7, #26]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d145      	bne.n	8002528 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024a0:	881a      	ldrh	r2, [r3, #0]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024ac:	1c9a      	adds	r2, r3, #2
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	3b01      	subs	r3, #1
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80024c0:	e032      	b.n	8002528 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d112      	bne.n	80024f6 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024d4:	881a      	ldrh	r2, [r3, #0]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024e0:	1c9a      	adds	r2, r3, #2
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	3b01      	subs	r3, #1
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80024f4:	e018      	b.n	8002528 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024f6:	f7fe fb33 	bl	8000b60 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	683a      	ldr	r2, [r7, #0]
 8002502:	429a      	cmp	r2, r3
 8002504:	d803      	bhi.n	800250e <HAL_SPI_Transmit+0x164>
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800250c:	d102      	bne.n	8002514 <HAL_SPI_Transmit+0x16a>
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d109      	bne.n	8002528 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2200      	movs	r2, #0
 8002520:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e0b2      	b.n	800268e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800252c:	b29b      	uxth	r3, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1c7      	bne.n	80024c2 <HAL_SPI_Transmit+0x118>
 8002532:	e083      	b.n	800263c <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d002      	beq.n	8002542 <HAL_SPI_Transmit+0x198>
 800253c:	8b7b      	ldrh	r3, [r7, #26]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d177      	bne.n	8002632 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002546:	b29b      	uxth	r3, r3
 8002548:	2b01      	cmp	r3, #1
 800254a:	d912      	bls.n	8002572 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002550:	881a      	ldrh	r2, [r3, #0]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800255c:	1c9a      	adds	r2, r3, #2
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002566:	b29b      	uxth	r3, r3
 8002568:	3b02      	subs	r3, #2
 800256a:	b29a      	uxth	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002570:	e05f      	b.n	8002632 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	330c      	adds	r3, #12
 800257c:	7812      	ldrb	r2, [r2, #0]
 800257e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002584:	1c5a      	adds	r2, r3, #1
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800258e:	b29b      	uxth	r3, r3
 8002590:	3b01      	subs	r3, #1
 8002592:	b29a      	uxth	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002598:	e04b      	b.n	8002632 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d12b      	bne.n	8002600 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d912      	bls.n	80025d8 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025b6:	881a      	ldrh	r2, [r3, #0]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025c2:	1c9a      	adds	r2, r3, #2
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	3b02      	subs	r3, #2
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80025d6:	e02c      	b.n	8002632 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	330c      	adds	r3, #12
 80025e2:	7812      	ldrb	r2, [r2, #0]
 80025e4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025ea:	1c5a      	adds	r2, r3, #1
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	3b01      	subs	r3, #1
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80025fe:	e018      	b.n	8002632 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002600:	f7fe faae 	bl	8000b60 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	429a      	cmp	r2, r3
 800260e:	d803      	bhi.n	8002618 <HAL_SPI_Transmit+0x26e>
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002616:	d102      	bne.n	800261e <HAL_SPI_Transmit+0x274>
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d109      	bne.n	8002632 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e02d      	b.n	800268e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002636:	b29b      	uxth	r3, r3
 8002638:	2b00      	cmp	r3, #0
 800263a:	d1ae      	bne.n	800259a <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800263c:	69fa      	ldr	r2, [r7, #28]
 800263e:	6839      	ldr	r1, [r7, #0]
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f000 fe09 	bl	8003258 <SPI_EndRxTxTransaction>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d002      	beq.n	8002652 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2220      	movs	r2, #32
 8002650:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d10a      	bne.n	8002670 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800265a:	2300      	movs	r3, #0
 800265c:	617b      	str	r3, [r7, #20]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	617b      	str	r3, [r7, #20]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	617b      	str	r3, [r7, #20]
 800266e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e000      	b.n	800268e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800268c:	2300      	movs	r3, #0
  }
}
 800268e:	4618      	mov	r0, r3
 8002690:	3720      	adds	r7, #32
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b088      	sub	sp, #32
 800269a:	af02      	add	r7, sp, #8
 800269c:	60f8      	str	r0, [r7, #12]
 800269e:	60b9      	str	r1, [r7, #8]
 80026a0:	603b      	str	r3, [r7, #0]
 80026a2:	4613      	mov	r3, r2
 80026a4:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d001      	beq.n	80026b6 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80026b2:	2302      	movs	r3, #2
 80026b4:	e123      	b.n	80028fe <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d002      	beq.n	80026c2 <HAL_SPI_Receive+0x2c>
 80026bc:	88fb      	ldrh	r3, [r7, #6]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e11b      	b.n	80028fe <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80026ce:	d112      	bne.n	80026f6 <HAL_SPI_Receive+0x60>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d10e      	bne.n	80026f6 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2204      	movs	r2, #4
 80026dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80026e0:	88fa      	ldrh	r2, [r7, #6]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	9300      	str	r3, [sp, #0]
 80026e6:	4613      	mov	r3, r2
 80026e8:	68ba      	ldr	r2, [r7, #8]
 80026ea:	68b9      	ldr	r1, [r7, #8]
 80026ec:	68f8      	ldr	r0, [r7, #12]
 80026ee:	f000 f90a 	bl	8002906 <HAL_SPI_TransmitReceive>
 80026f2:	4603      	mov	r3, r0
 80026f4:	e103      	b.n	80028fe <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80026f6:	f7fe fa33 	bl	8000b60 <HAL_GetTick>
 80026fa:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002702:	2b01      	cmp	r3, #1
 8002704:	d101      	bne.n	800270a <HAL_SPI_Receive+0x74>
 8002706:	2302      	movs	r3, #2
 8002708:	e0f9      	b.n	80028fe <HAL_SPI_Receive+0x268>
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2201      	movs	r2, #1
 800270e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2204      	movs	r2, #4
 8002716:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2200      	movs	r2, #0
 800271e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	68ba      	ldr	r2, [r7, #8]
 8002724:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	88fa      	ldrh	r2, [r7, #6]
 800272a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	88fa      	ldrh	r2, [r7, #6]
 8002732:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2200      	movs	r2, #0
 8002740:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2200      	movs	r2, #0
 800274c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2200      	movs	r2, #0
 8002752:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800275c:	d908      	bls.n	8002770 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800276c:	605a      	str	r2, [r3, #4]
 800276e:	e007      	b.n	8002780 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	685a      	ldr	r2, [r3, #4]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800277e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002788:	d10f      	bne.n	80027aa <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002798:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80027a8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027b4:	2b40      	cmp	r3, #64	@ 0x40
 80027b6:	d007      	beq.n	80027c8 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80027c6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80027d0:	d875      	bhi.n	80028be <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80027d2:	e037      	b.n	8002844 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d117      	bne.n	8002812 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f103 020c 	add.w	r2, r3, #12
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ee:	7812      	ldrb	r2, [r2, #0]
 80027f0:	b2d2      	uxtb	r2, r2
 80027f2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f8:	1c5a      	adds	r2, r3, #1
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002804:	b29b      	uxth	r3, r3
 8002806:	3b01      	subs	r3, #1
 8002808:	b29a      	uxth	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8002810:	e018      	b.n	8002844 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002812:	f7fe f9a5 	bl	8000b60 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	429a      	cmp	r2, r3
 8002820:	d803      	bhi.n	800282a <HAL_SPI_Receive+0x194>
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002828:	d102      	bne.n	8002830 <HAL_SPI_Receive+0x19a>
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d109      	bne.n	8002844 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e05c      	b.n	80028fe <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800284a:	b29b      	uxth	r3, r3
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1c1      	bne.n	80027d4 <HAL_SPI_Receive+0x13e>
 8002850:	e03b      	b.n	80028ca <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	2b01      	cmp	r3, #1
 800285e:	d115      	bne.n	800288c <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68da      	ldr	r2, [r3, #12]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286a:	b292      	uxth	r2, r2
 800286c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002872:	1c9a      	adds	r2, r3, #2
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800287e:	b29b      	uxth	r3, r3
 8002880:	3b01      	subs	r3, #1
 8002882:	b29a      	uxth	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800288a:	e018      	b.n	80028be <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800288c:	f7fe f968 	bl	8000b60 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	683a      	ldr	r2, [r7, #0]
 8002898:	429a      	cmp	r2, r3
 800289a:	d803      	bhi.n	80028a4 <HAL_SPI_Receive+0x20e>
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80028a2:	d102      	bne.n	80028aa <HAL_SPI_Receive+0x214>
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d109      	bne.n	80028be <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2201      	movs	r2, #1
 80028ae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e01f      	b.n	80028fe <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1c3      	bne.n	8002852 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80028ca:	697a      	ldr	r2, [r7, #20]
 80028cc:	6839      	ldr	r1, [r7, #0]
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f000 fc6a 	bl	80031a8 <SPI_EndRxTransaction>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d002      	beq.n	80028e0 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2220      	movs	r2, #32
 80028de:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e000      	b.n	80028fe <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 80028fc:	2300      	movs	r3, #0
  }
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3718      	adds	r7, #24
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	b08a      	sub	sp, #40	@ 0x28
 800290a:	af00      	add	r7, sp, #0
 800290c:	60f8      	str	r0, [r7, #12]
 800290e:	60b9      	str	r1, [r7, #8]
 8002910:	607a      	str	r2, [r7, #4]
 8002912:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002914:	2301      	movs	r3, #1
 8002916:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002918:	f7fe f922 	bl	8000b60 <HAL_GetTick>
 800291c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002924:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800292c:	887b      	ldrh	r3, [r7, #2]
 800292e:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8002930:	887b      	ldrh	r3, [r7, #2]
 8002932:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002934:	7ffb      	ldrb	r3, [r7, #31]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d00c      	beq.n	8002954 <HAL_SPI_TransmitReceive+0x4e>
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002940:	d106      	bne.n	8002950 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d102      	bne.n	8002950 <HAL_SPI_TransmitReceive+0x4a>
 800294a:	7ffb      	ldrb	r3, [r7, #31]
 800294c:	2b04      	cmp	r3, #4
 800294e:	d001      	beq.n	8002954 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002950:	2302      	movs	r3, #2
 8002952:	e1f3      	b.n	8002d3c <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d005      	beq.n	8002966 <HAL_SPI_TransmitReceive+0x60>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d002      	beq.n	8002966 <HAL_SPI_TransmitReceive+0x60>
 8002960:	887b      	ldrh	r3, [r7, #2]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e1e8      	b.n	8002d3c <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002970:	2b01      	cmp	r3, #1
 8002972:	d101      	bne.n	8002978 <HAL_SPI_TransmitReceive+0x72>
 8002974:	2302      	movs	r3, #2
 8002976:	e1e1      	b.n	8002d3c <HAL_SPI_TransmitReceive+0x436>
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002986:	b2db      	uxtb	r3, r3
 8002988:	2b04      	cmp	r3, #4
 800298a:	d003      	beq.n	8002994 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2205      	movs	r2, #5
 8002990:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	887a      	ldrh	r2, [r7, #2]
 80029a4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	887a      	ldrh	r2, [r7, #2]
 80029ac:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	68ba      	ldr	r2, [r7, #8]
 80029b4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	887a      	ldrh	r2, [r7, #2]
 80029ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	887a      	ldrh	r2, [r7, #2]
 80029c0:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2200      	movs	r2, #0
 80029cc:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80029d6:	d802      	bhi.n	80029de <HAL_SPI_TransmitReceive+0xd8>
 80029d8:	8abb      	ldrh	r3, [r7, #20]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d908      	bls.n	80029f0 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80029ec:	605a      	str	r2, [r3, #4]
 80029ee:	e007      	b.n	8002a00 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	685a      	ldr	r2, [r3, #4]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80029fe:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a0a:	2b40      	cmp	r3, #64	@ 0x40
 8002a0c:	d007      	beq.n	8002a1e <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a1c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002a26:	f240 8083 	bls.w	8002b30 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d002      	beq.n	8002a38 <HAL_SPI_TransmitReceive+0x132>
 8002a32:	8afb      	ldrh	r3, [r7, #22]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d16f      	bne.n	8002b18 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a3c:	881a      	ldrh	r2, [r3, #0]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a48:	1c9a      	adds	r2, r3, #2
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	3b01      	subs	r3, #1
 8002a56:	b29a      	uxth	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a5c:	e05c      	b.n	8002b18 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f003 0302 	and.w	r3, r3, #2
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d11b      	bne.n	8002aa4 <HAL_SPI_TransmitReceive+0x19e>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d016      	beq.n	8002aa4 <HAL_SPI_TransmitReceive+0x19e>
 8002a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d113      	bne.n	8002aa4 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a80:	881a      	ldrh	r2, [r3, #0]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a8c:	1c9a      	adds	r2, r3, #2
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d11c      	bne.n	8002aec <HAL_SPI_TransmitReceive+0x1e6>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d016      	beq.n	8002aec <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68da      	ldr	r2, [r3, #12]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac8:	b292      	uxth	r2, r2
 8002aca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad0:	1c9a      	adds	r2, r3, #2
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002aec:	f7fe f838 	bl	8000b60 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	6a3b      	ldr	r3, [r7, #32]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d80d      	bhi.n	8002b18 <HAL_SPI_TransmitReceive+0x212>
 8002afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002afe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b02:	d009      	beq.n	8002b18 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e111      	b.n	8002d3c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d19d      	bne.n	8002a5e <HAL_SPI_TransmitReceive+0x158>
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d197      	bne.n	8002a5e <HAL_SPI_TransmitReceive+0x158>
 8002b2e:	e0e5      	b.n	8002cfc <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d003      	beq.n	8002b40 <HAL_SPI_TransmitReceive+0x23a>
 8002b38:	8afb      	ldrh	r3, [r7, #22]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	f040 80d1 	bne.w	8002ce2 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d912      	bls.n	8002b70 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b4e:	881a      	ldrh	r2, [r3, #0]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b5a:	1c9a      	adds	r2, r3, #2
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	3b02      	subs	r3, #2
 8002b68:	b29a      	uxth	r2, r3
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002b6e:	e0b8      	b.n	8002ce2 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	330c      	adds	r3, #12
 8002b7a:	7812      	ldrb	r2, [r2, #0]
 8002b7c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b82:	1c5a      	adds	r2, r3, #1
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	b29a      	uxth	r2, r3
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b96:	e0a4      	b.n	8002ce2 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d134      	bne.n	8002c10 <HAL_SPI_TransmitReceive+0x30a>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d02f      	beq.n	8002c10 <HAL_SPI_TransmitReceive+0x30a>
 8002bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d12c      	bne.n	8002c10 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d912      	bls.n	8002be6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bc4:	881a      	ldrh	r2, [r3, #0]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bd0:	1c9a      	adds	r2, r3, #2
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	3b02      	subs	r3, #2
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002be4:	e012      	b.n	8002c0c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	330c      	adds	r3, #12
 8002bf0:	7812      	ldrb	r2, [r2, #0]
 8002bf2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bf8:	1c5a      	adds	r2, r3, #1
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	3b01      	subs	r3, #1
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d148      	bne.n	8002cb0 <HAL_SPI_TransmitReceive+0x3aa>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d042      	beq.n	8002cb0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d923      	bls.n	8002c7e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68da      	ldr	r2, [r3, #12]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c40:	b292      	uxth	r2, r2
 8002c42:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c48:	1c9a      	adds	r2, r3, #2
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	3b02      	subs	r3, #2
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d81f      	bhi.n	8002cac <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	685a      	ldr	r2, [r3, #4]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002c7a:	605a      	str	r2, [r3, #4]
 8002c7c:	e016      	b.n	8002cac <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f103 020c 	add.w	r2, r3, #12
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8a:	7812      	ldrb	r2, [r2, #0]
 8002c8c:	b2d2      	uxtb	r2, r2
 8002c8e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c94:	1c5a      	adds	r2, r3, #1
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002cac:	2301      	movs	r3, #1
 8002cae:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002cb0:	f7fd ff56 	bl	8000b60 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	6a3b      	ldr	r3, [r7, #32]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d803      	bhi.n	8002cc8 <HAL_SPI_TransmitReceive+0x3c2>
 8002cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cc2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002cc6:	d102      	bne.n	8002cce <HAL_SPI_TransmitReceive+0x3c8>
 8002cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d109      	bne.n	8002ce2 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e02c      	b.n	8002d3c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	f47f af55 	bne.w	8002b98 <HAL_SPI_TransmitReceive+0x292>
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	f47f af4e 	bne.w	8002b98 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002cfc:	6a3a      	ldr	r2, [r7, #32]
 8002cfe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002d00:	68f8      	ldr	r0, [r7, #12]
 8002d02:	f000 faa9 	bl	8003258 <SPI_EndRxTxTransaction>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d008      	beq.n	8002d1e <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2220      	movs	r2, #32
 8002d10:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e00e      	b.n	8002d3c <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e000      	b.n	8002d3c <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
  }
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3728      	adds	r7, #40	@ 0x28
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b088      	sub	sp, #32
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d10e      	bne.n	8002d84 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d009      	beq.n	8002d84 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d004      	beq.n	8002d84 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	4798      	blx	r3
    return;
 8002d82:	e0ce      	b.n	8002f22 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d009      	beq.n	8002da2 <HAL_SPI_IRQHandler+0x5e>
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d004      	beq.n	8002da2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	4798      	blx	r3
    return;
 8002da0:	e0bf      	b.n	8002f22 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	f003 0320 	and.w	r3, r3, #32
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d10a      	bne.n	8002dc2 <HAL_SPI_IRQHandler+0x7e>
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d105      	bne.n	8002dc2 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 80b0 	beq.w	8002f22 <HAL_SPI_IRQHandler+0x1de>
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	f003 0320 	and.w	r3, r3, #32
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f000 80aa 	beq.w	8002f22 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d023      	beq.n	8002e20 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	2b03      	cmp	r3, #3
 8002de2:	d011      	beq.n	8002e08 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002de8:	f043 0204 	orr.w	r2, r3, #4
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002df0:	2300      	movs	r3, #0
 8002df2:	617b      	str	r3, [r7, #20]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	617b      	str	r3, [r7, #20]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	617b      	str	r3, [r7, #20]
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	e00b      	b.n	8002e20 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e08:	2300      	movs	r3, #0
 8002e0a:	613b      	str	r3, [r7, #16]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	613b      	str	r3, [r7, #16]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	613b      	str	r3, [r7, #16]
 8002e1c:	693b      	ldr	r3, [r7, #16]
        return;
 8002e1e:	e080      	b.n	8002f22 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	f003 0320 	and.w	r3, r3, #32
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d014      	beq.n	8002e54 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e2e:	f043 0201 	orr.w	r2, r3, #1
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002e36:	2300      	movs	r3, #0
 8002e38:	60fb      	str	r3, [r7, #12]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	60fb      	str	r3, [r7, #12]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e50:	601a      	str	r2, [r3, #0]
 8002e52:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00c      	beq.n	8002e78 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e62:	f043 0208 	orr.w	r2, r3, #8
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	60bb      	str	r3, [r7, #8]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	60bb      	str	r3, [r7, #8]
 8002e76:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d04f      	beq.n	8002f20 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	685a      	ldr	r2, [r3, #4]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002e8e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d104      	bne.n	8002eac <HAL_SPI_IRQHandler+0x168>
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	f003 0301 	and.w	r3, r3, #1
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d034      	beq.n	8002f16 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	685a      	ldr	r2, [r3, #4]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f022 0203 	bic.w	r2, r2, #3
 8002eba:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d011      	beq.n	8002ee8 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ec8:	4a17      	ldr	r2, [pc, #92]	@ (8002f28 <HAL_SPI_IRQHandler+0x1e4>)
 8002eca:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7fd ff82 	bl	8000dda <HAL_DMA_Abort_IT>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d005      	beq.n	8002ee8 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ee0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d016      	beq.n	8002f1e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ef4:	4a0c      	ldr	r2, [pc, #48]	@ (8002f28 <HAL_SPI_IRQHandler+0x1e4>)
 8002ef6:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7fd ff6c 	bl	8000dda <HAL_DMA_Abort_IT>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00a      	beq.n	8002f1e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f0c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8002f14:	e003      	b.n	8002f1e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 f808 	bl	8002f2c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002f1c:	e000      	b.n	8002f20 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8002f1e:	bf00      	nop
    return;
 8002f20:	bf00      	nop
  }
}
 8002f22:	3720      	adds	r7, #32
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	08002f41 	.word	0x08002f41

08002f2c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f4c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002f5c:	68f8      	ldr	r0, [r7, #12]
 8002f5e:	f7ff ffe5 	bl	8002f2c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002f62:	bf00      	nop
 8002f64:	3710      	adds	r7, #16
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
	...

08002f6c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b088      	sub	sp, #32
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	603b      	str	r3, [r7, #0]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002f7c:	f7fd fdf0 	bl	8000b60 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f84:	1a9b      	subs	r3, r3, r2
 8002f86:	683a      	ldr	r2, [r7, #0]
 8002f88:	4413      	add	r3, r2
 8002f8a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002f8c:	f7fd fde8 	bl	8000b60 <HAL_GetTick>
 8002f90:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002f92:	4b39      	ldr	r3, [pc, #228]	@ (8003078 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	015b      	lsls	r3, r3, #5
 8002f98:	0d1b      	lsrs	r3, r3, #20
 8002f9a:	69fa      	ldr	r2, [r7, #28]
 8002f9c:	fb02 f303 	mul.w	r3, r2, r3
 8002fa0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002fa2:	e054      	b.n	800304e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002faa:	d050      	beq.n	800304e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002fac:	f7fd fdd8 	bl	8000b60 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	69fa      	ldr	r2, [r7, #28]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d902      	bls.n	8002fc2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d13d      	bne.n	800303e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	685a      	ldr	r2, [r3, #4]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002fd0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002fda:	d111      	bne.n	8003000 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fe4:	d004      	beq.n	8002ff0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fee:	d107      	bne.n	8003000 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ffe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003004:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003008:	d10f      	bne.n	800302a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003018:	601a      	str	r2, [r3, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003028:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e017      	b.n	800306e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d101      	bne.n	8003048 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003044:	2300      	movs	r3, #0
 8003046:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	3b01      	subs	r3, #1
 800304c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	689a      	ldr	r2, [r3, #8]
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	4013      	ands	r3, r2
 8003058:	68ba      	ldr	r2, [r7, #8]
 800305a:	429a      	cmp	r2, r3
 800305c:	bf0c      	ite	eq
 800305e:	2301      	moveq	r3, #1
 8003060:	2300      	movne	r3, #0
 8003062:	b2db      	uxtb	r3, r3
 8003064:	461a      	mov	r2, r3
 8003066:	79fb      	ldrb	r3, [r7, #7]
 8003068:	429a      	cmp	r2, r3
 800306a:	d19b      	bne.n	8002fa4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3720      	adds	r7, #32
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	20000010 	.word	0x20000010

0800307c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b08a      	sub	sp, #40	@ 0x28
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]
 8003088:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800308a:	2300      	movs	r3, #0
 800308c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800308e:	f7fd fd67 	bl	8000b60 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003096:	1a9b      	subs	r3, r3, r2
 8003098:	683a      	ldr	r2, [r7, #0]
 800309a:	4413      	add	r3, r2
 800309c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800309e:	f7fd fd5f 	bl	8000b60 <HAL_GetTick>
 80030a2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	330c      	adds	r3, #12
 80030aa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80030ac:	4b3d      	ldr	r3, [pc, #244]	@ (80031a4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	4613      	mov	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4413      	add	r3, r2
 80030b6:	00da      	lsls	r2, r3, #3
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	0d1b      	lsrs	r3, r3, #20
 80030bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030be:	fb02 f303 	mul.w	r3, r2, r3
 80030c2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80030c4:	e060      	b.n	8003188 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80030cc:	d107      	bne.n	80030de <SPI_WaitFifoStateUntilTimeout+0x62>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d104      	bne.n	80030de <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80030dc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80030e4:	d050      	beq.n	8003188 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80030e6:	f7fd fd3b 	bl	8000b60 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	6a3b      	ldr	r3, [r7, #32]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d902      	bls.n	80030fc <SPI_WaitFifoStateUntilTimeout+0x80>
 80030f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d13d      	bne.n	8003178 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	685a      	ldr	r2, [r3, #4]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800310a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003114:	d111      	bne.n	800313a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800311e:	d004      	beq.n	800312a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003128:	d107      	bne.n	800313a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003138:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800313e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003142:	d10f      	bne.n	8003164 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003152:	601a      	str	r2, [r3, #0]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003162:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e010      	b.n	800319a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800317e:	2300      	movs	r3, #0
 8003180:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	3b01      	subs	r3, #1
 8003186:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	689a      	ldr	r2, [r3, #8]
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	4013      	ands	r3, r2
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	429a      	cmp	r2, r3
 8003196:	d196      	bne.n	80030c6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3728      	adds	r7, #40	@ 0x28
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	20000010 	.word	0x20000010

080031a8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af02      	add	r7, sp, #8
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80031bc:	d111      	bne.n	80031e2 <SPI_EndRxTransaction+0x3a>
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031c6:	d004      	beq.n	80031d2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031d0:	d107      	bne.n	80031e2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031e0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	9300      	str	r3, [sp, #0]
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	2200      	movs	r2, #0
 80031ea:	2180      	movs	r1, #128	@ 0x80
 80031ec:	68f8      	ldr	r0, [r7, #12]
 80031ee:	f7ff febd 	bl	8002f6c <SPI_WaitFlagStateUntilTimeout>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d007      	beq.n	8003208 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031fc:	f043 0220 	orr.w	r2, r3, #32
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e023      	b.n	8003250 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003210:	d11d      	bne.n	800324e <SPI_EndRxTransaction+0xa6>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800321a:	d004      	beq.n	8003226 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003224:	d113      	bne.n	800324e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	9300      	str	r3, [sp, #0]
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	2200      	movs	r2, #0
 800322e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003232:	68f8      	ldr	r0, [r7, #12]
 8003234:	f7ff ff22 	bl	800307c <SPI_WaitFifoStateUntilTimeout>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d007      	beq.n	800324e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003242:	f043 0220 	orr.w	r2, r3, #32
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e000      	b.n	8003250 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3710      	adds	r7, #16
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af02      	add	r7, sp, #8
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	9300      	str	r3, [sp, #0]
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	2200      	movs	r2, #0
 800326c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f7ff ff03 	bl	800307c <SPI_WaitFifoStateUntilTimeout>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d007      	beq.n	800328c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003280:	f043 0220 	orr.w	r2, r3, #32
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e027      	b.n	80032dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	9300      	str	r3, [sp, #0]
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	2200      	movs	r2, #0
 8003294:	2180      	movs	r1, #128	@ 0x80
 8003296:	68f8      	ldr	r0, [r7, #12]
 8003298:	f7ff fe68 	bl	8002f6c <SPI_WaitFlagStateUntilTimeout>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d007      	beq.n	80032b2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032a6:	f043 0220 	orr.w	r2, r3, #32
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e014      	b.n	80032dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	9300      	str	r3, [sp, #0]
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80032be:	68f8      	ldr	r0, [r7, #12]
 80032c0:	f7ff fedc 	bl	800307c <SPI_WaitFifoStateUntilTimeout>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d007      	beq.n	80032da <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032ce:	f043 0220 	orr.w	r2, r3, #32
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e000      	b.n	80032dc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e042      	b.n	800337c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d106      	bne.n	800330e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f7fd fb43 	bl	8000994 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2224      	movs	r2, #36	@ 0x24
 8003312:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f022 0201 	bic.w	r2, r2, #1
 8003324:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800332a:	2b00      	cmp	r3, #0
 800332c:	d002      	beq.n	8003334 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 fbb2 	bl	8003a98 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f000 f8b3 	bl	80034a0 <UART_SetConfig>
 800333a:	4603      	mov	r3, r0
 800333c:	2b01      	cmp	r3, #1
 800333e:	d101      	bne.n	8003344 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e01b      	b.n	800337c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	685a      	ldr	r2, [r3, #4]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003352:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	689a      	ldr	r2, [r3, #8]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003362:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f042 0201 	orr.w	r2, r2, #1
 8003372:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f000 fc31 	bl	8003bdc <UART_CheckIdleState>
 800337a:	4603      	mov	r3, r0
}
 800337c:	4618      	mov	r0, r3
 800337e:	3708      	adds	r7, #8
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b08a      	sub	sp, #40	@ 0x28
 8003388:	af02      	add	r7, sp, #8
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	603b      	str	r3, [r7, #0]
 8003390:	4613      	mov	r3, r2
 8003392:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800339a:	2b20      	cmp	r3, #32
 800339c:	d17b      	bne.n	8003496 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d002      	beq.n	80033aa <HAL_UART_Transmit+0x26>
 80033a4:	88fb      	ldrh	r3, [r7, #6]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e074      	b.n	8003498 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2221      	movs	r2, #33	@ 0x21
 80033ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033be:	f7fd fbcf 	bl	8000b60 <HAL_GetTick>
 80033c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	88fa      	ldrh	r2, [r7, #6]
 80033c8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	88fa      	ldrh	r2, [r7, #6]
 80033d0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033dc:	d108      	bne.n	80033f0 <HAL_UART_Transmit+0x6c>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d104      	bne.n	80033f0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80033e6:	2300      	movs	r3, #0
 80033e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	61bb      	str	r3, [r7, #24]
 80033ee:	e003      	b.n	80033f8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033f4:	2300      	movs	r3, #0
 80033f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80033f8:	e030      	b.n	800345c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	9300      	str	r3, [sp, #0]
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	2200      	movs	r2, #0
 8003402:	2180      	movs	r1, #128	@ 0x80
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	f000 fc93 	bl	8003d30 <UART_WaitOnFlagUntilTimeout>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d005      	beq.n	800341c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2220      	movs	r2, #32
 8003414:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e03d      	b.n	8003498 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d10b      	bne.n	800343a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	881b      	ldrh	r3, [r3, #0]
 8003426:	461a      	mov	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003430:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	3302      	adds	r3, #2
 8003436:	61bb      	str	r3, [r7, #24]
 8003438:	e007      	b.n	800344a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	781a      	ldrb	r2, [r3, #0]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	3301      	adds	r3, #1
 8003448:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003450:	b29b      	uxth	r3, r3
 8003452:	3b01      	subs	r3, #1
 8003454:	b29a      	uxth	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003462:	b29b      	uxth	r3, r3
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1c8      	bne.n	80033fa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	9300      	str	r3, [sp, #0]
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	2200      	movs	r2, #0
 8003470:	2140      	movs	r1, #64	@ 0x40
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f000 fc5c 	bl	8003d30 <UART_WaitOnFlagUntilTimeout>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d005      	beq.n	800348a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2220      	movs	r2, #32
 8003482:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e006      	b.n	8003498 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2220      	movs	r2, #32
 800348e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003492:	2300      	movs	r3, #0
 8003494:	e000      	b.n	8003498 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003496:	2302      	movs	r3, #2
  }
}
 8003498:	4618      	mov	r0, r3
 800349a:	3720      	adds	r7, #32
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034a4:	b08c      	sub	sp, #48	@ 0x30
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80034aa:	2300      	movs	r3, #0
 80034ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	689a      	ldr	r2, [r3, #8]
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	431a      	orrs	r2, r3
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	431a      	orrs	r2, r3
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	69db      	ldr	r3, [r3, #28]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	4baa      	ldr	r3, [pc, #680]	@ (8003778 <UART_SetConfig+0x2d8>)
 80034d0:	4013      	ands	r3, r2
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	6812      	ldr	r2, [r2, #0]
 80034d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80034d8:	430b      	orrs	r3, r1
 80034da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	68da      	ldr	r2, [r3, #12]
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	430a      	orrs	r2, r1
 80034f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a9f      	ldr	r2, [pc, #636]	@ (800377c <UART_SetConfig+0x2dc>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d004      	beq.n	800350c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003508:	4313      	orrs	r3, r2
 800350a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003516:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	6812      	ldr	r2, [r2, #0]
 800351e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003520:	430b      	orrs	r3, r1
 8003522:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800352a:	f023 010f 	bic.w	r1, r3, #15
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	430a      	orrs	r2, r1
 8003538:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a90      	ldr	r2, [pc, #576]	@ (8003780 <UART_SetConfig+0x2e0>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d125      	bne.n	8003590 <UART_SetConfig+0xf0>
 8003544:	4b8f      	ldr	r3, [pc, #572]	@ (8003784 <UART_SetConfig+0x2e4>)
 8003546:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800354a:	f003 0303 	and.w	r3, r3, #3
 800354e:	2b03      	cmp	r3, #3
 8003550:	d81a      	bhi.n	8003588 <UART_SetConfig+0xe8>
 8003552:	a201      	add	r2, pc, #4	@ (adr r2, 8003558 <UART_SetConfig+0xb8>)
 8003554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003558:	08003569 	.word	0x08003569
 800355c:	08003579 	.word	0x08003579
 8003560:	08003571 	.word	0x08003571
 8003564:	08003581 	.word	0x08003581
 8003568:	2301      	movs	r3, #1
 800356a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800356e:	e116      	b.n	800379e <UART_SetConfig+0x2fe>
 8003570:	2302      	movs	r3, #2
 8003572:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003576:	e112      	b.n	800379e <UART_SetConfig+0x2fe>
 8003578:	2304      	movs	r3, #4
 800357a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800357e:	e10e      	b.n	800379e <UART_SetConfig+0x2fe>
 8003580:	2308      	movs	r3, #8
 8003582:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003586:	e10a      	b.n	800379e <UART_SetConfig+0x2fe>
 8003588:	2310      	movs	r3, #16
 800358a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800358e:	e106      	b.n	800379e <UART_SetConfig+0x2fe>
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a7c      	ldr	r2, [pc, #496]	@ (8003788 <UART_SetConfig+0x2e8>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d138      	bne.n	800360c <UART_SetConfig+0x16c>
 800359a:	4b7a      	ldr	r3, [pc, #488]	@ (8003784 <UART_SetConfig+0x2e4>)
 800359c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035a0:	f003 030c 	and.w	r3, r3, #12
 80035a4:	2b0c      	cmp	r3, #12
 80035a6:	d82d      	bhi.n	8003604 <UART_SetConfig+0x164>
 80035a8:	a201      	add	r2, pc, #4	@ (adr r2, 80035b0 <UART_SetConfig+0x110>)
 80035aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ae:	bf00      	nop
 80035b0:	080035e5 	.word	0x080035e5
 80035b4:	08003605 	.word	0x08003605
 80035b8:	08003605 	.word	0x08003605
 80035bc:	08003605 	.word	0x08003605
 80035c0:	080035f5 	.word	0x080035f5
 80035c4:	08003605 	.word	0x08003605
 80035c8:	08003605 	.word	0x08003605
 80035cc:	08003605 	.word	0x08003605
 80035d0:	080035ed 	.word	0x080035ed
 80035d4:	08003605 	.word	0x08003605
 80035d8:	08003605 	.word	0x08003605
 80035dc:	08003605 	.word	0x08003605
 80035e0:	080035fd 	.word	0x080035fd
 80035e4:	2300      	movs	r3, #0
 80035e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035ea:	e0d8      	b.n	800379e <UART_SetConfig+0x2fe>
 80035ec:	2302      	movs	r3, #2
 80035ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035f2:	e0d4      	b.n	800379e <UART_SetConfig+0x2fe>
 80035f4:	2304      	movs	r3, #4
 80035f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035fa:	e0d0      	b.n	800379e <UART_SetConfig+0x2fe>
 80035fc:	2308      	movs	r3, #8
 80035fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003602:	e0cc      	b.n	800379e <UART_SetConfig+0x2fe>
 8003604:	2310      	movs	r3, #16
 8003606:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800360a:	e0c8      	b.n	800379e <UART_SetConfig+0x2fe>
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a5e      	ldr	r2, [pc, #376]	@ (800378c <UART_SetConfig+0x2ec>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d125      	bne.n	8003662 <UART_SetConfig+0x1c2>
 8003616:	4b5b      	ldr	r3, [pc, #364]	@ (8003784 <UART_SetConfig+0x2e4>)
 8003618:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800361c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003620:	2b30      	cmp	r3, #48	@ 0x30
 8003622:	d016      	beq.n	8003652 <UART_SetConfig+0x1b2>
 8003624:	2b30      	cmp	r3, #48	@ 0x30
 8003626:	d818      	bhi.n	800365a <UART_SetConfig+0x1ba>
 8003628:	2b20      	cmp	r3, #32
 800362a:	d00a      	beq.n	8003642 <UART_SetConfig+0x1a2>
 800362c:	2b20      	cmp	r3, #32
 800362e:	d814      	bhi.n	800365a <UART_SetConfig+0x1ba>
 8003630:	2b00      	cmp	r3, #0
 8003632:	d002      	beq.n	800363a <UART_SetConfig+0x19a>
 8003634:	2b10      	cmp	r3, #16
 8003636:	d008      	beq.n	800364a <UART_SetConfig+0x1aa>
 8003638:	e00f      	b.n	800365a <UART_SetConfig+0x1ba>
 800363a:	2300      	movs	r3, #0
 800363c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003640:	e0ad      	b.n	800379e <UART_SetConfig+0x2fe>
 8003642:	2302      	movs	r3, #2
 8003644:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003648:	e0a9      	b.n	800379e <UART_SetConfig+0x2fe>
 800364a:	2304      	movs	r3, #4
 800364c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003650:	e0a5      	b.n	800379e <UART_SetConfig+0x2fe>
 8003652:	2308      	movs	r3, #8
 8003654:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003658:	e0a1      	b.n	800379e <UART_SetConfig+0x2fe>
 800365a:	2310      	movs	r3, #16
 800365c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003660:	e09d      	b.n	800379e <UART_SetConfig+0x2fe>
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a4a      	ldr	r2, [pc, #296]	@ (8003790 <UART_SetConfig+0x2f0>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d125      	bne.n	80036b8 <UART_SetConfig+0x218>
 800366c:	4b45      	ldr	r3, [pc, #276]	@ (8003784 <UART_SetConfig+0x2e4>)
 800366e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003672:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003676:	2bc0      	cmp	r3, #192	@ 0xc0
 8003678:	d016      	beq.n	80036a8 <UART_SetConfig+0x208>
 800367a:	2bc0      	cmp	r3, #192	@ 0xc0
 800367c:	d818      	bhi.n	80036b0 <UART_SetConfig+0x210>
 800367e:	2b80      	cmp	r3, #128	@ 0x80
 8003680:	d00a      	beq.n	8003698 <UART_SetConfig+0x1f8>
 8003682:	2b80      	cmp	r3, #128	@ 0x80
 8003684:	d814      	bhi.n	80036b0 <UART_SetConfig+0x210>
 8003686:	2b00      	cmp	r3, #0
 8003688:	d002      	beq.n	8003690 <UART_SetConfig+0x1f0>
 800368a:	2b40      	cmp	r3, #64	@ 0x40
 800368c:	d008      	beq.n	80036a0 <UART_SetConfig+0x200>
 800368e:	e00f      	b.n	80036b0 <UART_SetConfig+0x210>
 8003690:	2300      	movs	r3, #0
 8003692:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003696:	e082      	b.n	800379e <UART_SetConfig+0x2fe>
 8003698:	2302      	movs	r3, #2
 800369a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800369e:	e07e      	b.n	800379e <UART_SetConfig+0x2fe>
 80036a0:	2304      	movs	r3, #4
 80036a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036a6:	e07a      	b.n	800379e <UART_SetConfig+0x2fe>
 80036a8:	2308      	movs	r3, #8
 80036aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036ae:	e076      	b.n	800379e <UART_SetConfig+0x2fe>
 80036b0:	2310      	movs	r3, #16
 80036b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036b6:	e072      	b.n	800379e <UART_SetConfig+0x2fe>
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a35      	ldr	r2, [pc, #212]	@ (8003794 <UART_SetConfig+0x2f4>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d12a      	bne.n	8003718 <UART_SetConfig+0x278>
 80036c2:	4b30      	ldr	r3, [pc, #192]	@ (8003784 <UART_SetConfig+0x2e4>)
 80036c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80036d0:	d01a      	beq.n	8003708 <UART_SetConfig+0x268>
 80036d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80036d6:	d81b      	bhi.n	8003710 <UART_SetConfig+0x270>
 80036d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036dc:	d00c      	beq.n	80036f8 <UART_SetConfig+0x258>
 80036de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036e2:	d815      	bhi.n	8003710 <UART_SetConfig+0x270>
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d003      	beq.n	80036f0 <UART_SetConfig+0x250>
 80036e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036ec:	d008      	beq.n	8003700 <UART_SetConfig+0x260>
 80036ee:	e00f      	b.n	8003710 <UART_SetConfig+0x270>
 80036f0:	2300      	movs	r3, #0
 80036f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036f6:	e052      	b.n	800379e <UART_SetConfig+0x2fe>
 80036f8:	2302      	movs	r3, #2
 80036fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036fe:	e04e      	b.n	800379e <UART_SetConfig+0x2fe>
 8003700:	2304      	movs	r3, #4
 8003702:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003706:	e04a      	b.n	800379e <UART_SetConfig+0x2fe>
 8003708:	2308      	movs	r3, #8
 800370a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800370e:	e046      	b.n	800379e <UART_SetConfig+0x2fe>
 8003710:	2310      	movs	r3, #16
 8003712:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003716:	e042      	b.n	800379e <UART_SetConfig+0x2fe>
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a17      	ldr	r2, [pc, #92]	@ (800377c <UART_SetConfig+0x2dc>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d13a      	bne.n	8003798 <UART_SetConfig+0x2f8>
 8003722:	4b18      	ldr	r3, [pc, #96]	@ (8003784 <UART_SetConfig+0x2e4>)
 8003724:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003728:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800372c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003730:	d01a      	beq.n	8003768 <UART_SetConfig+0x2c8>
 8003732:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003736:	d81b      	bhi.n	8003770 <UART_SetConfig+0x2d0>
 8003738:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800373c:	d00c      	beq.n	8003758 <UART_SetConfig+0x2b8>
 800373e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003742:	d815      	bhi.n	8003770 <UART_SetConfig+0x2d0>
 8003744:	2b00      	cmp	r3, #0
 8003746:	d003      	beq.n	8003750 <UART_SetConfig+0x2b0>
 8003748:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800374c:	d008      	beq.n	8003760 <UART_SetConfig+0x2c0>
 800374e:	e00f      	b.n	8003770 <UART_SetConfig+0x2d0>
 8003750:	2300      	movs	r3, #0
 8003752:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003756:	e022      	b.n	800379e <UART_SetConfig+0x2fe>
 8003758:	2302      	movs	r3, #2
 800375a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800375e:	e01e      	b.n	800379e <UART_SetConfig+0x2fe>
 8003760:	2304      	movs	r3, #4
 8003762:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003766:	e01a      	b.n	800379e <UART_SetConfig+0x2fe>
 8003768:	2308      	movs	r3, #8
 800376a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800376e:	e016      	b.n	800379e <UART_SetConfig+0x2fe>
 8003770:	2310      	movs	r3, #16
 8003772:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003776:	e012      	b.n	800379e <UART_SetConfig+0x2fe>
 8003778:	cfff69f3 	.word	0xcfff69f3
 800377c:	40008000 	.word	0x40008000
 8003780:	40013800 	.word	0x40013800
 8003784:	40021000 	.word	0x40021000
 8003788:	40004400 	.word	0x40004400
 800378c:	40004800 	.word	0x40004800
 8003790:	40004c00 	.word	0x40004c00
 8003794:	40005000 	.word	0x40005000
 8003798:	2310      	movs	r3, #16
 800379a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4aae      	ldr	r2, [pc, #696]	@ (8003a5c <UART_SetConfig+0x5bc>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	f040 8097 	bne.w	80038d8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80037aa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80037ae:	2b08      	cmp	r3, #8
 80037b0:	d823      	bhi.n	80037fa <UART_SetConfig+0x35a>
 80037b2:	a201      	add	r2, pc, #4	@ (adr r2, 80037b8 <UART_SetConfig+0x318>)
 80037b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b8:	080037dd 	.word	0x080037dd
 80037bc:	080037fb 	.word	0x080037fb
 80037c0:	080037e5 	.word	0x080037e5
 80037c4:	080037fb 	.word	0x080037fb
 80037c8:	080037eb 	.word	0x080037eb
 80037cc:	080037fb 	.word	0x080037fb
 80037d0:	080037fb 	.word	0x080037fb
 80037d4:	080037fb 	.word	0x080037fb
 80037d8:	080037f3 	.word	0x080037f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037dc:	f7fe fa7a 	bl	8001cd4 <HAL_RCC_GetPCLK1Freq>
 80037e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80037e2:	e010      	b.n	8003806 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037e4:	4b9e      	ldr	r3, [pc, #632]	@ (8003a60 <UART_SetConfig+0x5c0>)
 80037e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80037e8:	e00d      	b.n	8003806 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037ea:	f7fe fa05 	bl	8001bf8 <HAL_RCC_GetSysClockFreq>
 80037ee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80037f0:	e009      	b.n	8003806 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80037f8:	e005      	b.n	8003806 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80037fa:	2300      	movs	r3, #0
 80037fc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003804:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003808:	2b00      	cmp	r3, #0
 800380a:	f000 8130 	beq.w	8003a6e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003812:	4a94      	ldr	r2, [pc, #592]	@ (8003a64 <UART_SetConfig+0x5c4>)
 8003814:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003818:	461a      	mov	r2, r3
 800381a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800381c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003820:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	685a      	ldr	r2, [r3, #4]
 8003826:	4613      	mov	r3, r2
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	4413      	add	r3, r2
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	429a      	cmp	r2, r3
 8003830:	d305      	bcc.n	800383e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	429a      	cmp	r2, r3
 800383c:	d903      	bls.n	8003846 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003844:	e113      	b.n	8003a6e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003848:	2200      	movs	r2, #0
 800384a:	60bb      	str	r3, [r7, #8]
 800384c:	60fa      	str	r2, [r7, #12]
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003852:	4a84      	ldr	r2, [pc, #528]	@ (8003a64 <UART_SetConfig+0x5c4>)
 8003854:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003858:	b29b      	uxth	r3, r3
 800385a:	2200      	movs	r2, #0
 800385c:	603b      	str	r3, [r7, #0]
 800385e:	607a      	str	r2, [r7, #4]
 8003860:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003864:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003868:	f7fc fcd6 	bl	8000218 <__aeabi_uldivmod>
 800386c:	4602      	mov	r2, r0
 800386e:	460b      	mov	r3, r1
 8003870:	4610      	mov	r0, r2
 8003872:	4619      	mov	r1, r3
 8003874:	f04f 0200 	mov.w	r2, #0
 8003878:	f04f 0300 	mov.w	r3, #0
 800387c:	020b      	lsls	r3, r1, #8
 800387e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003882:	0202      	lsls	r2, r0, #8
 8003884:	6979      	ldr	r1, [r7, #20]
 8003886:	6849      	ldr	r1, [r1, #4]
 8003888:	0849      	lsrs	r1, r1, #1
 800388a:	2000      	movs	r0, #0
 800388c:	460c      	mov	r4, r1
 800388e:	4605      	mov	r5, r0
 8003890:	eb12 0804 	adds.w	r8, r2, r4
 8003894:	eb43 0905 	adc.w	r9, r3, r5
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	469a      	mov	sl, r3
 80038a0:	4693      	mov	fp, r2
 80038a2:	4652      	mov	r2, sl
 80038a4:	465b      	mov	r3, fp
 80038a6:	4640      	mov	r0, r8
 80038a8:	4649      	mov	r1, r9
 80038aa:	f7fc fcb5 	bl	8000218 <__aeabi_uldivmod>
 80038ae:	4602      	mov	r2, r0
 80038b0:	460b      	mov	r3, r1
 80038b2:	4613      	mov	r3, r2
 80038b4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80038b6:	6a3b      	ldr	r3, [r7, #32]
 80038b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80038bc:	d308      	bcc.n	80038d0 <UART_SetConfig+0x430>
 80038be:	6a3b      	ldr	r3, [r7, #32]
 80038c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038c4:	d204      	bcs.n	80038d0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	6a3a      	ldr	r2, [r7, #32]
 80038cc:	60da      	str	r2, [r3, #12]
 80038ce:	e0ce      	b.n	8003a6e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80038d6:	e0ca      	b.n	8003a6e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	69db      	ldr	r3, [r3, #28]
 80038dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038e0:	d166      	bne.n	80039b0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80038e2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80038e6:	2b08      	cmp	r3, #8
 80038e8:	d827      	bhi.n	800393a <UART_SetConfig+0x49a>
 80038ea:	a201      	add	r2, pc, #4	@ (adr r2, 80038f0 <UART_SetConfig+0x450>)
 80038ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f0:	08003915 	.word	0x08003915
 80038f4:	0800391d 	.word	0x0800391d
 80038f8:	08003925 	.word	0x08003925
 80038fc:	0800393b 	.word	0x0800393b
 8003900:	0800392b 	.word	0x0800392b
 8003904:	0800393b 	.word	0x0800393b
 8003908:	0800393b 	.word	0x0800393b
 800390c:	0800393b 	.word	0x0800393b
 8003910:	08003933 	.word	0x08003933
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003914:	f7fe f9de 	bl	8001cd4 <HAL_RCC_GetPCLK1Freq>
 8003918:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800391a:	e014      	b.n	8003946 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800391c:	f7fe f9f0 	bl	8001d00 <HAL_RCC_GetPCLK2Freq>
 8003920:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003922:	e010      	b.n	8003946 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003924:	4b4e      	ldr	r3, [pc, #312]	@ (8003a60 <UART_SetConfig+0x5c0>)
 8003926:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003928:	e00d      	b.n	8003946 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800392a:	f7fe f965 	bl	8001bf8 <HAL_RCC_GetSysClockFreq>
 800392e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003930:	e009      	b.n	8003946 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003932:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003936:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003938:	e005      	b.n	8003946 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800393a:	2300      	movs	r3, #0
 800393c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003944:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003948:	2b00      	cmp	r3, #0
 800394a:	f000 8090 	beq.w	8003a6e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003952:	4a44      	ldr	r2, [pc, #272]	@ (8003a64 <UART_SetConfig+0x5c4>)
 8003954:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003958:	461a      	mov	r2, r3
 800395a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800395c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003960:	005a      	lsls	r2, r3, #1
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	085b      	lsrs	r3, r3, #1
 8003968:	441a      	add	r2, r3
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003972:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003974:	6a3b      	ldr	r3, [r7, #32]
 8003976:	2b0f      	cmp	r3, #15
 8003978:	d916      	bls.n	80039a8 <UART_SetConfig+0x508>
 800397a:	6a3b      	ldr	r3, [r7, #32]
 800397c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003980:	d212      	bcs.n	80039a8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003982:	6a3b      	ldr	r3, [r7, #32]
 8003984:	b29b      	uxth	r3, r3
 8003986:	f023 030f 	bic.w	r3, r3, #15
 800398a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800398c:	6a3b      	ldr	r3, [r7, #32]
 800398e:	085b      	lsrs	r3, r3, #1
 8003990:	b29b      	uxth	r3, r3
 8003992:	f003 0307 	and.w	r3, r3, #7
 8003996:	b29a      	uxth	r2, r3
 8003998:	8bfb      	ldrh	r3, [r7, #30]
 800399a:	4313      	orrs	r3, r2
 800399c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	8bfa      	ldrh	r2, [r7, #30]
 80039a4:	60da      	str	r2, [r3, #12]
 80039a6:	e062      	b.n	8003a6e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80039ae:	e05e      	b.n	8003a6e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039b0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80039b4:	2b08      	cmp	r3, #8
 80039b6:	d828      	bhi.n	8003a0a <UART_SetConfig+0x56a>
 80039b8:	a201      	add	r2, pc, #4	@ (adr r2, 80039c0 <UART_SetConfig+0x520>)
 80039ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039be:	bf00      	nop
 80039c0:	080039e5 	.word	0x080039e5
 80039c4:	080039ed 	.word	0x080039ed
 80039c8:	080039f5 	.word	0x080039f5
 80039cc:	08003a0b 	.word	0x08003a0b
 80039d0:	080039fb 	.word	0x080039fb
 80039d4:	08003a0b 	.word	0x08003a0b
 80039d8:	08003a0b 	.word	0x08003a0b
 80039dc:	08003a0b 	.word	0x08003a0b
 80039e0:	08003a03 	.word	0x08003a03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039e4:	f7fe f976 	bl	8001cd4 <HAL_RCC_GetPCLK1Freq>
 80039e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80039ea:	e014      	b.n	8003a16 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039ec:	f7fe f988 	bl	8001d00 <HAL_RCC_GetPCLK2Freq>
 80039f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80039f2:	e010      	b.n	8003a16 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039f4:	4b1a      	ldr	r3, [pc, #104]	@ (8003a60 <UART_SetConfig+0x5c0>)
 80039f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80039f8:	e00d      	b.n	8003a16 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039fa:	f7fe f8fd 	bl	8001bf8 <HAL_RCC_GetSysClockFreq>
 80039fe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003a00:	e009      	b.n	8003a16 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a06:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003a08:	e005      	b.n	8003a16 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003a14:	bf00      	nop
    }

    if (pclk != 0U)
 8003a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d028      	beq.n	8003a6e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a20:	4a10      	ldr	r2, [pc, #64]	@ (8003a64 <UART_SetConfig+0x5c4>)
 8003a22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a26:	461a      	mov	r2, r3
 8003a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a2a:	fbb3 f2f2 	udiv	r2, r3, r2
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	085b      	lsrs	r3, r3, #1
 8003a34:	441a      	add	r2, r3
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a3e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a40:	6a3b      	ldr	r3, [r7, #32]
 8003a42:	2b0f      	cmp	r3, #15
 8003a44:	d910      	bls.n	8003a68 <UART_SetConfig+0x5c8>
 8003a46:	6a3b      	ldr	r3, [r7, #32]
 8003a48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a4c:	d20c      	bcs.n	8003a68 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a4e:	6a3b      	ldr	r3, [r7, #32]
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	60da      	str	r2, [r3, #12]
 8003a58:	e009      	b.n	8003a6e <UART_SetConfig+0x5ce>
 8003a5a:	bf00      	nop
 8003a5c:	40008000 	.word	0x40008000
 8003a60:	00f42400 	.word	0x00f42400
 8003a64:	08004178 	.word	0x08004178
      }
      else
      {
        ret = HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	2201      	movs	r2, #1
 8003a72:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	2200      	movs	r2, #0
 8003a82:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	2200      	movs	r2, #0
 8003a88:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003a8a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3730      	adds	r7, #48	@ 0x30
 8003a92:	46bd      	mov	sp, r7
 8003a94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003a98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aa4:	f003 0308 	and.w	r3, r3, #8
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d00a      	beq.n	8003ac2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00a      	beq.n	8003ae4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00a      	beq.n	8003b06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	430a      	orrs	r2, r1
 8003b04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b0a:	f003 0304 	and.w	r3, r3, #4
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00a      	beq.n	8003b28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	430a      	orrs	r2, r1
 8003b26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b2c:	f003 0310 	and.w	r3, r3, #16
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00a      	beq.n	8003b4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	430a      	orrs	r2, r1
 8003b48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b4e:	f003 0320 	and.w	r3, r3, #32
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00a      	beq.n	8003b6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d01a      	beq.n	8003bae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b96:	d10a      	bne.n	8003bae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	430a      	orrs	r2, r1
 8003bac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00a      	beq.n	8003bd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	430a      	orrs	r2, r1
 8003bce:	605a      	str	r2, [r3, #4]
  }
}
 8003bd0:	bf00      	nop
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b098      	sub	sp, #96	@ 0x60
 8003be0:	af02      	add	r7, sp, #8
 8003be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003bec:	f7fc ffb8 	bl	8000b60 <HAL_GetTick>
 8003bf0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0308 	and.w	r3, r3, #8
 8003bfc:	2b08      	cmp	r3, #8
 8003bfe:	d12f      	bne.n	8003c60 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c00:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003c04:	9300      	str	r3, [sp, #0]
 8003c06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 f88e 	bl	8003d30 <UART_WaitOnFlagUntilTimeout>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d022      	beq.n	8003c60 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c22:	e853 3f00 	ldrex	r3, [r3]
 8003c26:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003c28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c2e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	461a      	mov	r2, r3
 8003c36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c38:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c3a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c3c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c40:	e841 2300 	strex	r3, r2, [r1]
 8003c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003c46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d1e6      	bne.n	8003c1a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2220      	movs	r2, #32
 8003c50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e063      	b.n	8003d28 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0304 	and.w	r3, r3, #4
 8003c6a:	2b04      	cmp	r3, #4
 8003c6c:	d149      	bne.n	8003d02 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c6e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003c72:	9300      	str	r3, [sp, #0]
 8003c74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c76:	2200      	movs	r2, #0
 8003c78:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 f857 	bl	8003d30 <UART_WaitOnFlagUntilTimeout>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d03c      	beq.n	8003d02 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c90:	e853 3f00 	ldrex	r3, [r3]
 8003c94:	623b      	str	r3, [r7, #32]
   return(result);
 8003c96:	6a3b      	ldr	r3, [r7, #32]
 8003c98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ca6:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ca8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003caa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003cac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cae:	e841 2300 	strex	r3, r2, [r1]
 8003cb2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d1e6      	bne.n	8003c88 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	3308      	adds	r3, #8
 8003cc0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	e853 3f00 	ldrex	r3, [r3]
 8003cc8:	60fb      	str	r3, [r7, #12]
   return(result);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f023 0301 	bic.w	r3, r3, #1
 8003cd0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	3308      	adds	r3, #8
 8003cd8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003cda:	61fa      	str	r2, [r7, #28]
 8003cdc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cde:	69b9      	ldr	r1, [r7, #24]
 8003ce0:	69fa      	ldr	r2, [r7, #28]
 8003ce2:	e841 2300 	strex	r3, r2, [r1]
 8003ce6:	617b      	str	r3, [r7, #20]
   return(result);
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1e5      	bne.n	8003cba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2220      	movs	r2, #32
 8003cf2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e012      	b.n	8003d28 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2220      	movs	r2, #32
 8003d06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2220      	movs	r2, #32
 8003d0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3758      	adds	r7, #88	@ 0x58
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	603b      	str	r3, [r7, #0]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d40:	e04f      	b.n	8003de2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d48:	d04b      	beq.n	8003de2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d4a:	f7fc ff09 	bl	8000b60 <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	69ba      	ldr	r2, [r7, #24]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d302      	bcc.n	8003d60 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d101      	bne.n	8003d64 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e04e      	b.n	8003e02 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0304 	and.w	r3, r3, #4
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d037      	beq.n	8003de2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	2b80      	cmp	r3, #128	@ 0x80
 8003d76:	d034      	beq.n	8003de2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	2b40      	cmp	r3, #64	@ 0x40
 8003d7c:	d031      	beq.n	8003de2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	69db      	ldr	r3, [r3, #28]
 8003d84:	f003 0308 	and.w	r3, r3, #8
 8003d88:	2b08      	cmp	r3, #8
 8003d8a:	d110      	bne.n	8003dae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2208      	movs	r2, #8
 8003d92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d94:	68f8      	ldr	r0, [r7, #12]
 8003d96:	f000 f838 	bl	8003e0a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2208      	movs	r2, #8
 8003d9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e029      	b.n	8003e02 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	69db      	ldr	r3, [r3, #28]
 8003db4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003db8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003dbc:	d111      	bne.n	8003de2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003dc6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003dc8:	68f8      	ldr	r0, [r7, #12]
 8003dca:	f000 f81e 	bl	8003e0a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2220      	movs	r2, #32
 8003dd2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e00f      	b.n	8003e02 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	69da      	ldr	r2, [r3, #28]
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	4013      	ands	r3, r2
 8003dec:	68ba      	ldr	r2, [r7, #8]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	bf0c      	ite	eq
 8003df2:	2301      	moveq	r3, #1
 8003df4:	2300      	movne	r3, #0
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	461a      	mov	r2, r3
 8003dfa:	79fb      	ldrb	r3, [r7, #7]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d0a0      	beq.n	8003d42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	b095      	sub	sp, #84	@ 0x54
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e1a:	e853 3f00 	ldrex	r3, [r3]
 8003e1e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e22:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e30:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e32:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e34:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003e36:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003e38:	e841 2300 	strex	r3, r2, [r1]
 8003e3c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d1e6      	bne.n	8003e12 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	3308      	adds	r3, #8
 8003e4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e4c:	6a3b      	ldr	r3, [r7, #32]
 8003e4e:	e853 3f00 	ldrex	r3, [r3]
 8003e52:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e5a:	f023 0301 	bic.w	r3, r3, #1
 8003e5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	3308      	adds	r3, #8
 8003e66:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e68:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e6c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e70:	e841 2300 	strex	r3, r2, [r1]
 8003e74:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d1e3      	bne.n	8003e44 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d118      	bne.n	8003eb6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	e853 3f00 	ldrex	r3, [r3]
 8003e90:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	f023 0310 	bic.w	r3, r3, #16
 8003e98:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ea2:	61bb      	str	r3, [r7, #24]
 8003ea4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea6:	6979      	ldr	r1, [r7, #20]
 8003ea8:	69ba      	ldr	r2, [r7, #24]
 8003eaa:	e841 2300 	strex	r3, r2, [r1]
 8003eae:	613b      	str	r3, [r7, #16]
   return(result);
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d1e6      	bne.n	8003e84 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2220      	movs	r2, #32
 8003eba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003eca:	bf00      	nop
 8003ecc:	3754      	adds	r7, #84	@ 0x54
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr

08003ed6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003ed6:	b480      	push	{r7}
 8003ed8:	b085      	sub	sp, #20
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d101      	bne.n	8003eec <HAL_UARTEx_DisableFifoMode+0x16>
 8003ee8:	2302      	movs	r3, #2
 8003eea:	e027      	b.n	8003f3c <HAL_UARTEx_DisableFifoMode+0x66>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2224      	movs	r2, #36	@ 0x24
 8003ef8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f022 0201 	bic.w	r2, r2, #1
 8003f12:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8003f1a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2220      	movs	r2, #32
 8003f2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3714      	adds	r7, #20
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d101      	bne.n	8003f60 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	e02d      	b.n	8003fbc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2224      	movs	r2, #36	@ 0x24
 8003f6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f022 0201 	bic.w	r2, r2, #1
 8003f86:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	683a      	ldr	r2, [r7, #0]
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 f84f 	bl	8004040 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2220      	movs	r2, #32
 8003fae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3710      	adds	r7, #16
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d101      	bne.n	8003fdc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003fd8:	2302      	movs	r3, #2
 8003fda:	e02d      	b.n	8004038 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2224      	movs	r2, #36	@ 0x24
 8003fe8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f022 0201 	bic.w	r2, r2, #1
 8004002:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	683a      	ldr	r2, [r7, #0]
 8004014:	430a      	orrs	r2, r1
 8004016:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f000 f811 	bl	8004040 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2220      	movs	r2, #32
 800402a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3710      	adds	r7, #16
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004040:	b480      	push	{r7}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800404c:	2b00      	cmp	r3, #0
 800404e:	d108      	bne.n	8004062 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004060:	e031      	b.n	80040c6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004062:	2308      	movs	r3, #8
 8004064:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004066:	2308      	movs	r3, #8
 8004068:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	0e5b      	lsrs	r3, r3, #25
 8004072:	b2db      	uxtb	r3, r3
 8004074:	f003 0307 	and.w	r3, r3, #7
 8004078:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	0f5b      	lsrs	r3, r3, #29
 8004082:	b2db      	uxtb	r3, r3
 8004084:	f003 0307 	and.w	r3, r3, #7
 8004088:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800408a:	7bbb      	ldrb	r3, [r7, #14]
 800408c:	7b3a      	ldrb	r2, [r7, #12]
 800408e:	4911      	ldr	r1, [pc, #68]	@ (80040d4 <UARTEx_SetNbDataToProcess+0x94>)
 8004090:	5c8a      	ldrb	r2, [r1, r2]
 8004092:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004096:	7b3a      	ldrb	r2, [r7, #12]
 8004098:	490f      	ldr	r1, [pc, #60]	@ (80040d8 <UARTEx_SetNbDataToProcess+0x98>)
 800409a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800409c:	fb93 f3f2 	sdiv	r3, r3, r2
 80040a0:	b29a      	uxth	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80040a8:	7bfb      	ldrb	r3, [r7, #15]
 80040aa:	7b7a      	ldrb	r2, [r7, #13]
 80040ac:	4909      	ldr	r1, [pc, #36]	@ (80040d4 <UARTEx_SetNbDataToProcess+0x94>)
 80040ae:	5c8a      	ldrb	r2, [r1, r2]
 80040b0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80040b4:	7b7a      	ldrb	r2, [r7, #13]
 80040b6:	4908      	ldr	r1, [pc, #32]	@ (80040d8 <UARTEx_SetNbDataToProcess+0x98>)
 80040b8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80040ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80040be:	b29a      	uxth	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80040c6:	bf00      	nop
 80040c8:	3714      	adds	r7, #20
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	08004190 	.word	0x08004190
 80040d8:	08004198 	.word	0x08004198

080040dc <memset>:
 80040dc:	4402      	add	r2, r0
 80040de:	4603      	mov	r3, r0
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d100      	bne.n	80040e6 <memset+0xa>
 80040e4:	4770      	bx	lr
 80040e6:	f803 1b01 	strb.w	r1, [r3], #1
 80040ea:	e7f9      	b.n	80040e0 <memset+0x4>

080040ec <__libc_init_array>:
 80040ec:	b570      	push	{r4, r5, r6, lr}
 80040ee:	4d0d      	ldr	r5, [pc, #52]	@ (8004124 <__libc_init_array+0x38>)
 80040f0:	4c0d      	ldr	r4, [pc, #52]	@ (8004128 <__libc_init_array+0x3c>)
 80040f2:	1b64      	subs	r4, r4, r5
 80040f4:	10a4      	asrs	r4, r4, #2
 80040f6:	2600      	movs	r6, #0
 80040f8:	42a6      	cmp	r6, r4
 80040fa:	d109      	bne.n	8004110 <__libc_init_array+0x24>
 80040fc:	4d0b      	ldr	r5, [pc, #44]	@ (800412c <__libc_init_array+0x40>)
 80040fe:	4c0c      	ldr	r4, [pc, #48]	@ (8004130 <__libc_init_array+0x44>)
 8004100:	f000 f818 	bl	8004134 <_init>
 8004104:	1b64      	subs	r4, r4, r5
 8004106:	10a4      	asrs	r4, r4, #2
 8004108:	2600      	movs	r6, #0
 800410a:	42a6      	cmp	r6, r4
 800410c:	d105      	bne.n	800411a <__libc_init_array+0x2e>
 800410e:	bd70      	pop	{r4, r5, r6, pc}
 8004110:	f855 3b04 	ldr.w	r3, [r5], #4
 8004114:	4798      	blx	r3
 8004116:	3601      	adds	r6, #1
 8004118:	e7ee      	b.n	80040f8 <__libc_init_array+0xc>
 800411a:	f855 3b04 	ldr.w	r3, [r5], #4
 800411e:	4798      	blx	r3
 8004120:	3601      	adds	r6, #1
 8004122:	e7f2      	b.n	800410a <__libc_init_array+0x1e>
 8004124:	080041a8 	.word	0x080041a8
 8004128:	080041a8 	.word	0x080041a8
 800412c:	080041a8 	.word	0x080041a8
 8004130:	080041ac 	.word	0x080041ac

08004134 <_init>:
 8004134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004136:	bf00      	nop
 8004138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800413a:	bc08      	pop	{r3}
 800413c:	469e      	mov	lr, r3
 800413e:	4770      	bx	lr

08004140 <_fini>:
 8004140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004142:	bf00      	nop
 8004144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004146:	bc08      	pop	{r3}
 8004148:	469e      	mov	lr, r3
 800414a:	4770      	bx	lr
